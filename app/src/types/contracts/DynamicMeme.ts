/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DynamicMeme {
  export type MemeLevelStruct = {
    priceThreshold: BigNumberish;
    memeName: string;
  };

  export type MemeLevelStructOutput = [
    priceThreshold: bigint,
    memeName: string
  ] & { priceThreshold: bigint; memeName: string };
}

export declare namespace IWow {
  export type MarketStateStruct = {
    marketType: BigNumberish;
    marketAddress: AddressLike;
  };

  export type MarketStateStructOutput = [
    marketType: bigint,
    marketAddress: string
  ] & { marketType: bigint; marketAddress: string };
}

export interface DynamicMemeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TOTAL_SUPPLY"
      | "MIN_ORDER_SIZE"
      | "ORDER_REFERRER_FEE_BPS"
      | "PLATFORM_REFERRER_FEE_BPS"
      | "PROTOCOL_FEE_BPS"
      | "TOKEN_CREATOR_FEE_BPS"
      | "TOTAL_FEE_BPS"
      | "WETH"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bondingCurve"
      | "burn"
      | "buy"
      | "currentExchangeRate"
      | "decimals"
      | "getAllMemeLevels"
      | "getCurrentPrice"
      | "getEthBuyQuote"
      | "getEthSellQuote"
      | "getMemeLevelsCount"
      | "getMemeState"
      | "getTokenBuyQuote"
      | "getTokenSellQuote"
      | "initialize(address,address,address,string,string,string,(uint256,string)[])"
      | "initialize(address,address,address,string,string,string)"
      | "marketType"
      | "memeLevels"
      | "memeType"
      | "name"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "platformReferrer"
      | "poolAddress"
      | "protocolFeeRecipient"
      | "protocolRewards"
      | "sell"
      | "state"
      | "swapRouter"
      | "symbol"
      | "tokenCreator"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uniswapV3SwapCallback"
      | "updateMeme"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Initialized"
      | "MemeEvolved"
      | "Transfer"
      | "WowMarketGraduated"
      | "WowTokenBuy"
      | "WowTokenFees"
      | "WowTokenSell"
      | "WowTokenTransfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ORDER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_REFERRER_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_REFERRER_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_CREATOR_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllMemeLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBuyQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSellQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemeLevelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBuyQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSellQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address,address,string,string,string,(uint256,string)[])",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      string,
      string,
      string,
      DynamicMeme.MemeLevelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address,address,string,string,string)",
    values: [AddressLike, AddressLike, AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memeLevels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "memeType", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformReferrer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMeme",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ORDER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_REFERRER_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_REFERRER_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_CREATOR_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMemeLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBuyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemeLevelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBuyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address,address,string,string,string,(uint256,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address,address,string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memeLevels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memeType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateMeme", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeEvolvedEvent {
  export type InputTuple = [
    oldMeme: string,
    newMeme: string,
    price: BigNumberish
  ];
  export type OutputTuple = [oldMeme: string, newMeme: string, price: bigint];
  export interface OutputObject {
    oldMeme: string;
    newMeme: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowMarketGraduatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    poolAddress: AddressLike,
    totalEthLiquidity: BigNumberish,
    totalTokenLiquidity: BigNumberish,
    lpPositionId: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    poolAddress: string,
    totalEthLiquidity: bigint,
    totalTokenLiquidity: bigint,
    lpPositionId: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    poolAddress: string;
    totalEthLiquidity: bigint;
    totalTokenLiquidity: bigint;
    lpPositionId: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenBuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethSold: BigNumberish,
    tokensBought: BigNumberish,
    buyerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    recipient: string,
    orderReferrer: string,
    totalEth: bigint,
    ethFee: bigint,
    ethSold: bigint,
    tokensBought: bigint,
    buyerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    buyer: string;
    recipient: string;
    orderReferrer: string;
    totalEth: bigint;
    ethFee: bigint;
    ethSold: bigint;
    tokensBought: bigint;
    buyerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenFeesEvent {
  export type InputTuple = [
    tokenCreator: AddressLike,
    platformReferrer: AddressLike,
    orderReferrer: AddressLike,
    protocolFeeRecipient: AddressLike,
    tokenCreatorFee: BigNumberish,
    platformReferrerFee: BigNumberish,
    orderReferrerFee: BigNumberish,
    protocolFee: BigNumberish
  ];
  export type OutputTuple = [
    tokenCreator: string,
    platformReferrer: string,
    orderReferrer: string,
    protocolFeeRecipient: string,
    tokenCreatorFee: bigint,
    platformReferrerFee: bigint,
    orderReferrerFee: bigint,
    protocolFee: bigint
  ];
  export interface OutputObject {
    tokenCreator: string;
    platformReferrer: string;
    orderReferrer: string;
    protocolFeeRecipient: string;
    tokenCreatorFee: bigint;
    platformReferrerFee: bigint;
    orderReferrerFee: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenSellEvent {
  export type InputTuple = [
    seller: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethBought: BigNumberish,
    tokensSold: BigNumberish,
    sellerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    recipient: string,
    orderReferrer: string,
    totalEth: bigint,
    ethFee: bigint,
    ethBought: bigint,
    tokensSold: bigint,
    sellerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint
  ];
  export interface OutputObject {
    seller: string;
    recipient: string;
    orderReferrer: string;
    totalEth: bigint;
    ethFee: bigint;
    ethBought: bigint;
    tokensSold: bigint;
    sellerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    fromTokenBalance: BigNumberish,
    toTokenBalance: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    fromTokenBalance: bigint,
    toTokenBalance: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    fromTokenBalance: bigint;
    toTokenBalance: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DynamicMeme extends BaseContract {
  connect(runner?: ContractRunner | null): DynamicMeme;
  waitForDeployment(): Promise<this>;

  interface: DynamicMemeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MIN_ORDER_SIZE: TypedContractMethod<[], [bigint], "view">;

  ORDER_REFERRER_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_REFERRER_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  PROTOCOL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  TOKEN_CREATOR_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  TOTAL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bondingCurve: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<[tokensToBurn: BigNumberish], [void], "nonpayable">;

  buy: TypedContractMethod<
    [
      recipient: AddressLike,
      refundRecipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  currentExchangeRate: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getAllMemeLevels: TypedContractMethod<
    [],
    [DynamicMeme.MemeLevelStructOutput[]],
    "view"
  >;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getEthBuyQuote: TypedContractMethod<
    [ethOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getEthSellQuote: TypedContractMethod<
    [ethOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getMemeLevelsCount: TypedContractMethod<[], [bigint], "view">;

  getMemeState: TypedContractMethod<
    [],
    [
      [string, string, bigint, DynamicMeme.MemeLevelStructOutput[]] & {
        currentMemeName: string;
        currentMemeType: string;
        currentPrice: bigint;
        levels: DynamicMeme.MemeLevelStructOutput[];
      }
    ],
    "view"
  >;

  getTokenBuyQuote: TypedContractMethod<
    [tokenOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenSellQuote: TypedContractMethod<
    [tokenOrderSize: BigNumberish],
    [bigint],
    "view"
  >;

  "initialize(address,address,address,string,string,string,(uint256,string)[])": TypedContractMethod<
    [
      _tokenCreator: AddressLike,
      _platformReferrer: AddressLike,
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _symbol: string,
      _memeType: string,
      _initialLevels: DynamicMeme.MemeLevelStruct[]
    ],
    [void],
    "payable"
  >;

  "initialize(address,address,address,string,string,string)": TypedContractMethod<
    [
      _tokenCreator: AddressLike,
      _platformReferrer: AddressLike,
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string
    ],
    [void],
    "payable"
  >;

  marketType: TypedContractMethod<[], [bigint], "view">;

  memeLevels: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { priceThreshold: bigint; memeName: string }],
    "view"
  >;

  memeType: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  platformReferrer: TypedContractMethod<[], [string], "view">;

  poolAddress: TypedContractMethod<[], [string], "view">;

  protocolFeeRecipient: TypedContractMethod<[], [string], "view">;

  protocolRewards: TypedContractMethod<[], [string], "view">;

  sell: TypedContractMethod<
    [
      tokensToSell: BigNumberish,
      recipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  state: TypedContractMethod<[], [IWow.MarketStateStructOutput], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenCreator: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  updateMeme: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ORDER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORDER_REFERRER_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_REFERRER_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_CREATOR_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondingCurve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokensToBurn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      refundRecipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "currentExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllMemeLevels"
  ): TypedContractMethod<[], [DynamicMeme.MemeLevelStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthBuyQuote"
  ): TypedContractMethod<[ethOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthSellQuote"
  ): TypedContractMethod<[ethOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMemeLevelsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMemeState"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, DynamicMeme.MemeLevelStructOutput[]] & {
        currentMemeName: string;
        currentMemeType: string;
        currentPrice: bigint;
        levels: DynamicMeme.MemeLevelStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenBuyQuote"
  ): TypedContractMethod<[tokenOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenSellQuote"
  ): TypedContractMethod<[tokenOrderSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize(address,address,address,string,string,string,(uint256,string)[])"
  ): TypedContractMethod<
    [
      _tokenCreator: AddressLike,
      _platformReferrer: AddressLike,
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _symbol: string,
      _memeType: string,
      _initialLevels: DynamicMeme.MemeLevelStruct[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "initialize(address,address,address,string,string,string)"
  ): TypedContractMethod<
    [
      _tokenCreator: AddressLike,
      _platformReferrer: AddressLike,
      _bondingCurve: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "marketType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "memeLevels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { priceThreshold: bigint; memeName: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "memeType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformReferrer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolRewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [
      tokensToSell: BigNumberish,
      recipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      expectedMarketType: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [IWow.MarketStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMeme"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemeEvolved"
  ): TypedContractEvent<
    MemeEvolvedEvent.InputTuple,
    MemeEvolvedEvent.OutputTuple,
    MemeEvolvedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WowMarketGraduated"
  ): TypedContractEvent<
    WowMarketGraduatedEvent.InputTuple,
    WowMarketGraduatedEvent.OutputTuple,
    WowMarketGraduatedEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenBuy"
  ): TypedContractEvent<
    WowTokenBuyEvent.InputTuple,
    WowTokenBuyEvent.OutputTuple,
    WowTokenBuyEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenFees"
  ): TypedContractEvent<
    WowTokenFeesEvent.InputTuple,
    WowTokenFeesEvent.OutputTuple,
    WowTokenFeesEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenSell"
  ): TypedContractEvent<
    WowTokenSellEvent.InputTuple,
    WowTokenSellEvent.OutputTuple,
    WowTokenSellEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenTransfer"
  ): TypedContractEvent<
    WowTokenTransferEvent.InputTuple,
    WowTokenTransferEvent.OutputTuple,
    WowTokenTransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MemeEvolved(string,string,uint256)": TypedContractEvent<
      MemeEvolvedEvent.InputTuple,
      MemeEvolvedEvent.OutputTuple,
      MemeEvolvedEvent.OutputObject
    >;
    MemeEvolved: TypedContractEvent<
      MemeEvolvedEvent.InputTuple,
      MemeEvolvedEvent.OutputTuple,
      MemeEvolvedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WowMarketGraduated(address,address,uint256,uint256,uint256,uint8)": TypedContractEvent<
      WowMarketGraduatedEvent.InputTuple,
      WowMarketGraduatedEvent.OutputTuple,
      WowMarketGraduatedEvent.OutputObject
    >;
    WowMarketGraduated: TypedContractEvent<
      WowMarketGraduatedEvent.InputTuple,
      WowMarketGraduatedEvent.OutputTuple,
      WowMarketGraduatedEvent.OutputObject
    >;

    "WowTokenBuy(address,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      WowTokenBuyEvent.InputTuple,
      WowTokenBuyEvent.OutputTuple,
      WowTokenBuyEvent.OutputObject
    >;
    WowTokenBuy: TypedContractEvent<
      WowTokenBuyEvent.InputTuple,
      WowTokenBuyEvent.OutputTuple,
      WowTokenBuyEvent.OutputObject
    >;

    "WowTokenFees(address,address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WowTokenFeesEvent.InputTuple,
      WowTokenFeesEvent.OutputTuple,
      WowTokenFeesEvent.OutputObject
    >;
    WowTokenFees: TypedContractEvent<
      WowTokenFeesEvent.InputTuple,
      WowTokenFeesEvent.OutputTuple,
      WowTokenFeesEvent.OutputObject
    >;

    "WowTokenSell(address,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      WowTokenSellEvent.InputTuple,
      WowTokenSellEvent.OutputTuple,
      WowTokenSellEvent.OutputObject
    >;
    WowTokenSell: TypedContractEvent<
      WowTokenSellEvent.InputTuple,
      WowTokenSellEvent.OutputTuple,
      WowTokenSellEvent.OutputObject
    >;

    "WowTokenTransfer(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WowTokenTransferEvent.InputTuple,
      WowTokenTransferEvent.OutputTuple,
      WowTokenTransferEvent.OutputObject
    >;
    WowTokenTransfer: TypedContractEvent<
      WowTokenTransferEvent.InputTuple,
      WowTokenTransferEvent.OutputTuple,
      WowTokenTransferEvent.OutputObject
    >;
  };
}

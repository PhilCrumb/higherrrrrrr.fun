/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DynamicMemeFactory {
  export type MemeLevelStruct = {
    priceThreshold: BigNumberish;
    memeName: string;
  };

  export type MemeLevelStructOutput = [
    priceThreshold: bigint,
    memeName: string
  ] & { priceThreshold: bigint; memeName: string };
}

export interface DynamicMemeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bondingCurve"
      | "deployMeme"
      | "implementation"
      | "positionManager"
      | "protocolFeeRecipient"
      | "protocolRewards"
      | "swapRouter"
      | "weth"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MemeTokenDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployMeme",
    values: [
      string,
      string,
      string,
      AddressLike,
      DynamicMemeFactory.MemeLevelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace MemeTokenDeployedEvent {
  export type InputTuple = [
    token: AddressLike,
    creator: AddressLike,
    memeType: string
  ];
  export type OutputTuple = [token: string, creator: string, memeType: string];
  export interface OutputObject {
    token: string;
    creator: string;
    memeType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DynamicMemeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DynamicMemeFactory;
  waitForDeployment(): Promise<this>;

  interface: DynamicMemeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bondingCurve: TypedContractMethod<[], [string], "view">;

  deployMeme: TypedContractMethod<
    [
      symbol: string,
      tokenURI: string,
      memeType: string,
      platformReferrer: AddressLike,
      levels: DynamicMemeFactory.MemeLevelStruct[]
    ],
    [string],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  protocolFeeRecipient: TypedContractMethod<[], [string], "view">;

  protocolRewards: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bondingCurve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployMeme"
  ): TypedContractMethod<
    [
      symbol: string,
      tokenURI: string,
      memeType: string,
      platformReferrer: AddressLike,
      levels: DynamicMemeFactory.MemeLevelStruct[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolRewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MemeTokenDeployed"
  ): TypedContractEvent<
    MemeTokenDeployedEvent.InputTuple,
    MemeTokenDeployedEvent.OutputTuple,
    MemeTokenDeployedEvent.OutputObject
  >;

  filters: {
    "MemeTokenDeployed(address,address,string)": TypedContractEvent<
      MemeTokenDeployedEvent.InputTuple,
      MemeTokenDeployedEvent.OutputTuple,
      MemeTokenDeployedEvent.OutputObject
    >;
    MemeTokenDeployed: TypedContractEvent<
      MemeTokenDeployedEvent.InputTuple,
      MemeTokenDeployedEvent.OutputTuple,
      MemeTokenDeployedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EvolutionaryMemeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bondingCurveFacet"
      | "coreFacet"
      | "deployMeme"
      | "diamondCutFacet"
      | "erc20Facet"
      | "feeRecipient"
      | "getAddresses"
      | "getFacetInfo"
      | "getInitializeSelector"
      | "implementation"
      | "marketFacet"
      | "memeFacet"
      | "nftConvictionFacet"
      | "positionManager"
      | "swapRouter"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FacetAdded" | "MemeTokenDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bondingCurveFacet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "coreFacet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployMeme",
    values: [string, string, string, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCutFacet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Facet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFacetInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializeSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketFacet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "memeFacet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftConvictionFacet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bondingCurveFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coreFacet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondCutFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Facet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFacetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializeSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memeFacet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftConvictionFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace FacetAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    facet: AddressLike,
    selectors: BytesLike[]
  ];
  export type OutputTuple = [token: string, facet: string, selectors: string[]];
  export interface OutputObject {
    token: string;
    facet: string;
    selectors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeTokenDeployedEvent {
  export type InputTuple = [
    token: AddressLike,
    creator: AddressLike,
    memeType: string,
    bondingCurve: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    creator: string,
    memeType: string,
    bondingCurve: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    creator: string;
    memeType: string;
    bondingCurve: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EvolutionaryMemeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): EvolutionaryMemeFactory;
  waitForDeployment(): Promise<this>;

  interface: EvolutionaryMemeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bondingCurveFacet: TypedContractMethod<[], [string], "view">;

  coreFacet: TypedContractMethod<[], [string], "view">;

  deployMeme: TypedContractMethod<
    [
      symbol: string,
      tokenURI: string,
      memeType: string,
      priceThresholds: BigNumberish[],
      memeNames: string[]
    ],
    [[string, string] & { memeToken: string; bondingCurveAddress: string }],
    "nonpayable"
  >;

  diamondCutFacet: TypedContractMethod<[], [string], "view">;

  erc20Facet: TypedContractMethod<[], [string], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAddresses: TypedContractMethod<
    [],
    [
      [string, string, string, string, string] & {
        _implementation: string;
        _feeRecipient: string;
        _weth: string;
        _positionManager: string;
        _swapRouter: string;
      }
    ],
    "view"
  >;

  getFacetInfo: TypedContractMethod<
    [memeToken: AddressLike],
    [
      [string[], bigint[], boolean] & {
        facets: string[];
        selectorCounts: bigint[];
        initialized: boolean;
      }
    ],
    "view"
  >;

  getInitializeSelector: TypedContractMethod<[], [string], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  marketFacet: TypedContractMethod<[], [string], "view">;

  memeFacet: TypedContractMethod<[], [string], "view">;

  nftConvictionFacet: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bondingCurveFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coreFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployMeme"
  ): TypedContractMethod<
    [
      symbol: string,
      tokenURI: string,
      memeType: string,
      priceThresholds: BigNumberish[],
      memeNames: string[]
    ],
    [[string, string] & { memeToken: string; bondingCurveAddress: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diamondCutFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Facet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string, string] & {
        _implementation: string;
        _feeRecipient: string;
        _weth: string;
        _positionManager: string;
        _swapRouter: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFacetInfo"
  ): TypedContractMethod<
    [memeToken: AddressLike],
    [
      [string[], bigint[], boolean] & {
        facets: string[];
        selectorCounts: bigint[];
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInitializeSelector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "memeFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftConvictionFacet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FacetAdded"
  ): TypedContractEvent<
    FacetAddedEvent.InputTuple,
    FacetAddedEvent.OutputTuple,
    FacetAddedEvent.OutputObject
  >;
  getEvent(
    key: "MemeTokenDeployed"
  ): TypedContractEvent<
    MemeTokenDeployedEvent.InputTuple,
    MemeTokenDeployedEvent.OutputTuple,
    MemeTokenDeployedEvent.OutputObject
  >;

  filters: {
    "FacetAdded(address,address,bytes4[])": TypedContractEvent<
      FacetAddedEvent.InputTuple,
      FacetAddedEvent.OutputTuple,
      FacetAddedEvent.OutputObject
    >;
    FacetAdded: TypedContractEvent<
      FacetAddedEvent.InputTuple,
      FacetAddedEvent.OutputTuple,
      FacetAddedEvent.OutputObject
    >;

    "MemeTokenDeployed(address,address,string,address,uint256)": TypedContractEvent<
      MemeTokenDeployedEvent.InputTuple,
      MemeTokenDeployedEvent.OutputTuple,
      MemeTokenDeployedEvent.OutputObject
    >;
    MemeTokenDeployed: TypedContractEvent<
      MemeTokenDeployedEvent.InputTuple,
      MemeTokenDeployedEvent.OutputTuple,
      MemeTokenDeployedEvent.OutputObject
    >;
  };
}

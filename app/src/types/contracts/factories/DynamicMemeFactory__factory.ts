/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  DynamicMemeFactory,
  DynamicMemeFactoryInterface,
} from "../DynamicMemeFactory";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_protocolFeeRecipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "_protocolRewards",
        type: "address",
        internalType: "address",
      },
      {
        name: "_weth",
        type: "address",
        internalType: "address",
      },
      {
        name: "_positionManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "_swapRouter",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "bondingCurve",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deployMeme",
    inputs: [
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "tokenURI",
        type: "string",
        internalType: "string",
      },
      {
        name: "memeType",
        type: "string",
        internalType: "string",
      },
      {
        name: "platformReferrer",
        type: "address",
        internalType: "address",
      },
      {
        name: "levels",
        type: "tuple[]",
        internalType: "struct DynamicMemeFactory.MemeLevel[]",
        components: [
          {
            name: "priceThreshold",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "memeName",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "positionManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "protocolFeeRecipient",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "protocolRewards",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "swapRouter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "weth",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "MemeTokenDeployed",
    inputs: [
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "creator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "memeType",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
] as const;

export class DynamicMemeFactory__factory {
  static readonly abi = _abi;
  static createInterface(): DynamicMemeFactoryInterface {
    return new Interface(_abi) as DynamicMemeFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DynamicMemeFactory {
    return new Contract(address, _abi, runner) as unknown as DynamicMemeFactory;
  }
}

{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "InsufficientLiquidity"
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "A",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "B",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getCurrentPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "ethOrderSize",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "getEthBuyQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "ethOrderSize",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "getEthSellQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tokenOrderSize",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "getTokenBuyQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tokensToSell",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "getTokenSellQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "getCurrentPrice(uint256)": {
          "params": {
            "totalSupply": "Current total supply of tokens"
          },
          "returns": {
            "_0": "Current price of the token"
          }
        },
        "getEthBuyQuote(uint256,uint256)": {
          "params": {
            "currentSupply": "Current total supply of tokens",
            "ethOrderSize": "Amount of ETH to spend"
          },
          "returns": {
            "_0": "Amount of tokens that can be bought"
          }
        },
        "getEthSellQuote(uint256,uint256)": {
          "params": {
            "currentSupply": "Current total supply of tokens",
            "ethOrderSize": "Desired ETH output"
          },
          "returns": {
            "_0": "Amount of tokens to sell"
          }
        },
        "getTokenBuyQuote(uint256,uint256)": {
          "params": {
            "currentSupply": "Current total supply of tokens",
            "tokenOrderSize": "Amount of tokens to buy"
          },
          "returns": {
            "_0": "Amount of ETH needed"
          }
        },
        "getTokenSellQuote(uint256,uint256)": {
          "params": {
            "currentSupply": "Current total supply of tokens",
            "tokensToSell": "Amount of tokens to sell"
          },
          "returns": {
            "_0": "Amount of ETH to receive"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "A()": {
          "notice": "The base coefficient in the exponential bonding curve formula y = A*e^(Bx)"
        },
        "B()": {
          "notice": "The exponent coefficient in the exponential bonding curve formula y = A*e^(Bx)"
        },
        "getCurrentPrice(uint256)": {
          "notice": "Returns the current price of the token"
        },
        "getEthBuyQuote(uint256,uint256)": {
          "notice": "Returns number of tokens that can be bought with a given amount of ETH"
        },
        "getEthSellQuote(uint256,uint256)": {
          "notice": "Returns number of tokens that should be sold for a given amount of ETH"
        },
        "getTokenBuyQuote(uint256,uint256)": {
          "notice": "Returns amount of ETH needed to buy a given amount of tokens"
        },
        "getTokenSellQuote(uint256,uint256)": {
          "notice": "Returns amount of ETH received for selling a given amount of tokens"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin-upgradeable/contracts/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "solady/=lib/solady/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/interfaces/IBondingCurve.sol": "IBondingCurve"
    },
    "evmVersion": "paris",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "src/interfaces/IBondingCurve.sol": {
      "keccak256": "0xf1b42473eeecf199d9d6e133b98b38fc8a1ac4de11243a1960eca79037878451",
      "urls": [
        "bzz-raw://68993af0426629600eadf9a5e0dbc0ce6c6cfe52a7d0bb4583fe4280c276ce0b",
        "dweb:/ipfs/QmPzcP8J6XHedXF3vTTzZ8pT9uiaaG8DZiLADd8E5trzcp"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
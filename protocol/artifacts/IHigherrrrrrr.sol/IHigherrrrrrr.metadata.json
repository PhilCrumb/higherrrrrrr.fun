{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "AddressZero"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EthAmountTooSmall"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "EthTransferFailed"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InitialOrderSizeTooLarge"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InsufficientFunds"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InsufficientLiquidity"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidMarketType"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidPriceLevels"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MarketAlreadyGraduated"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MarketNotGraduated"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NoPriceLevels"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "OnlyPool"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "OnlyWeth"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "SlippageBoundsExceeded"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TooManyPriceLevels"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "poolAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "totalEthLiquidity",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "totalTokenLiquidity",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "lpPositionId",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "enum IHigherrrrrrr.MarketType",
            "name": "marketType",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HigherrrrrrMarketGraduated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "buyer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "totalEth",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "ethFee",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "ethSold",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "tokensBought",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "buyerTokenBalance",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "string",
            "name": "comment",
            "type": "string",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "enum IHigherrrrrrr.MarketType",
            "name": "marketType",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HigherrrrrrTokenBuy",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "feeRecipient",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "fee",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HigherrrrrrTokenFees",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "seller",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "totalEth",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "ethFee",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "ethBought",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "tokensSold",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "sellerTokenBalance",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "string",
            "name": "comment",
            "type": "string",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "enum IHigherrrrrrr.MarketType",
            "name": "marketType",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HigherrrrrrTokenSell",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "fromTokenBalance",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "toTokenBalance",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HigherrrrrrTokenTransfer",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokensToBurn",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "burn"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "refundRecipient",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "comment",
            "type": "string"
          },
          {
            "internalType": "enum IHigherrrrrrr.MarketType",
            "name": "expectedMarketType",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "minOrderSize",
            "type": "uint256"
          },
          {
            "internalType": "uint160",
            "name": "sqrtPriceLimitX96",
            "type": "uint160"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "buy",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "convictionNFT",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getCurrentPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getEthBuyQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getTokenSellQuote",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_bondingCurve",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_tokenURI",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          },
          {
            "internalType": "struct IHigherrrrrrr.PriceLevel[]",
            "name": "_priceLevels",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "address",
            "name": "_convictionNFT",
            "type": "address"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "initialize"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokensToSell",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "comment",
            "type": "string"
          },
          {
            "internalType": "enum IHigherrrrrrr.MarketType",
            "name": "expectedMarketType",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "minPayoutSize",
            "type": "uint256"
          },
          {
            "internalType": "uint160",
            "name": "sqrtPriceLimitX96",
            "type": "uint160"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "sell",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "state",
        "outputs": [
          {
            "internalType": "struct IHigherrrrrrr.MarketState",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "enum IHigherrrrrrr.MarketType",
                "name": "marketType",
                "type": "uint8"
              },
              {
                "internalType": "address",
                "name": "marketAddress",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "burn(uint256)": {
          "params": {
            "tokensToBurn": "The number of tokens to burn"
          }
        },
        "buy(address,address,string,uint8,uint256,uint160)": {
          "params": {
            "comment": "A comment associated with the buy order",
            "expectedMarketType": "The expected market type (0 = BONDING_CURVE, 1 = UNISWAP_POOL)",
            "minOrderSize": "The minimum size of the order to prevent slippage",
            "recipient": "The address to receive the purchased tokens",
            "refundRecipient": "The address to receive any excess ETH",
            "sqrtPriceLimitX96": "The price limit for Uniswap V3 pool swaps"
          }
        },
        "convictionNFT()": {
          "returns": {
            "_0": "The Conviction NFT contract address"
          }
        },
        "getCurrentPrice()": {
          "returns": {
            "_0": "The current price in ETH"
          }
        },
        "getEthBuyQuote(uint256)": {
          "params": {
            "amount": "The amount of ETH"
          },
          "returns": {
            "_0": "The number of tokens that can be bought"
          }
        },
        "getTokenSellQuote(uint256)": {
          "params": {
            "amount": "The number of tokens"
          },
          "returns": {
            "_0": "The amount of ETH that can be received"
          }
        },
        "initialize(address,string,string,string,(uint256,string)[],address)": {
          "params": {
            "_bondingCurve": "The address of the bonding curve module",
            "_convictionNFT": "The address of the conviction NFT contract",
            "_name": "The token name",
            "_priceLevels": "The price levels and names",
            "_symbol": "The token symbol",
            "_tokenURI": "The ERC20 token URI"
          }
        },
        "name()": {
          "returns": {
            "_0": "The token name"
          }
        },
        "sell(uint256,address,string,uint8,uint256,uint160)": {
          "params": {
            "comment": "A comment associated with the sell order",
            "expectedMarketType": "The expected market type (0 = BONDING_CURVE, 1 = UNISWAP_POOL)",
            "minPayoutSize": "The minimum payout size to prevent slippage",
            "recipient": "The address to receive the ETH payout",
            "sqrtPriceLimitX96": "The price limit for Uniswap V3 pool swaps",
            "tokensToSell": "The number of tokens to sell"
          }
        },
        "state()": {
          "returns": {
            "_0": "The market state"
          }
        },
        "tokenURI()": {
          "returns": {
            "_0": "The token URI"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "burn(uint256)": {
          "notice": "Allows a holder to burn their tokens after the market has graduated"
        },
        "buy(address,address,string,uint8,uint256,uint160)": {
          "notice": "Buys tokens from the bonding curve or Uniswap V3 pool depending on the market state."
        },
        "convictionNFT()": {
          "notice": "Returns the address of the Conviction NFT contract"
        },
        "getCurrentPrice()": {
          "notice": "Returns the current price from Uniswap pool or 0 if in bonding curve"
        },
        "getEthBuyQuote(uint256)": {
          "notice": "Provides a quote for buying tokens with a given amount of ETH"
        },
        "getTokenSellQuote(uint256)": {
          "notice": "Provides a quote for selling a given number of tokens"
        },
        "initialize(address,string,string,string,(uint256,string)[],address)": {
          "notice": "Initializes a new Higherrrrrrr token"
        },
        "name()": {
          "notice": "Returns the name of the token"
        },
        "sell(uint256,address,string,uint8,uint256,uint160)": {
          "notice": "Sells tokens to the bonding curve or Uniswap V3 pool depending on the market state"
        },
        "state()": {
          "notice": "Returns the current state of the market"
        },
        "tokenURI()": {
          "notice": "Returns the URI of the token"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin-upgradeable/contracts/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "solady/=lib/solady/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/interfaces/IHigherrrrrrr.sol": "IHigherrrrrrr"
    },
    "evmVersion": "paris",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "src/interfaces/IHigherrrrrrr.sol": {
      "keccak256": "0x54a07c02023be1af6b749cbe3980c49e8bc3612d5ad8d516c122f4516d704039",
      "urls": [
        "bzz-raw://fbe170301e4d40aa817f61c61f98ce9f41bad4a0c413d3b1ea3c177a12252220",
        "dweb:/ipfs/QmVacygJyP5rJC97BwoDgv6p17ExfrMSGa7zjmPDHnGjJC"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Collect",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "approve"
      },
      {
        "inputs": [
          {
            "internalType": "struct INonfungiblePositionManager.CollectParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint128",
                "name": "amount0Max",
                "type": "uint128"
              },
              {
                "internalType": "uint128",
                "name": "amount1Max",
                "type": "uint128"
              }
            ]
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "collect",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token0",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token1",
            "type": "address"
          },
          {
            "internalType": "uint24",
            "name": "fee",
            "type": "uint24"
          },
          {
            "internalType": "uint160",
            "name": "sqrtPriceX96",
            "type": "uint160"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "createAndInitializePoolIfNecessary",
        "outputs": [
          {
            "internalType": "address",
            "name": "pool",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct INonfungiblePositionManager.MintParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "token0",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "token1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "uint256",
                "name": "amount0Desired",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amount1Desired",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amount0Min",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amount1Min",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              }
            ]
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "mint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint128",
            "name": "liquidity",
            "type": "uint128"
          },
          {
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "positions",
        "outputs": [
          {
            "internalType": "uint96",
            "name": "nonce",
            "type": "uint96"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token0",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token1",
            "type": "address"
          },
          {
            "internalType": "uint24",
            "name": "fee",
            "type": "uint24"
          },
          {
            "internalType": "int24",
            "name": "tickLower",
            "type": "int24"
          },
          {
            "internalType": "int24",
            "name": "tickUpper",
            "type": "int24"
          },
          {
            "internalType": "uint128",
            "name": "liquidity",
            "type": "uint128"
          },
          {
            "internalType": "uint256",
            "name": "feeGrowthInside0LastX128",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "feeGrowthInside1LastX128",
            "type": "uint256"
          },
          {
            "internalType": "uint128",
            "name": "tokensOwed0",
            "type": "uint128"
          },
          {
            "internalType": "uint128",
            "name": "tokensOwed1",
            "type": "uint128"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "safeTransferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferFrom"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "collect((uint256,address,uint128,uint128))": {
          "params": {
            "params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
          },
          "returns": {
            "amount0": "The amount of fees collected in token0",
            "amount1": "The amount of fees collected in token1"
          }
        },
        "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
          "details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
          "params": {
            "fee": "The fee amount of the v3 pool for the specified token pair",
            "sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
            "token0": "The contract address of token0 of the pool",
            "token1": "The contract address of token1 of the pool"
          },
          "returns": {
            "pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
          }
        },
        "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
          "details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
          "params": {
            "params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
          },
          "returns": {
            "amount0": "The amount of token0",
            "amount1": "The amount of token1",
            "liquidity": "The amount of liquidity for this position",
            "tokenId": "The ID of the token that represents the minted position"
          }
        },
        "positions(uint256)": {
          "details": "Throws if the token ID is not valid.",
          "params": {
            "tokenId": "The ID of the token that represents the position"
          },
          "returns": {
            "fee": "The fee associated with the pool",
            "feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
            "feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
            "liquidity": "The liquidity of the position",
            "nonce": "The nonce for permits",
            "operator": "The address that is approved for spending",
            "tickLower": "The lower end of the tick range for the position",
            "tickUpper": "The higher end of the tick range for the position",
            "token0": "The address of the token0 for a specific pool",
            "token1": "The address of the token1 for a specific pool",
            "tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
            "tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "collect((uint256,address,uint128,uint128))": {
          "notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
        },
        "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
          "notice": "Creates a new pool if it does not exist, then initializes if not initialized"
        },
        "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
          "notice": "Creates a new position wrapped in a NFT"
        },
        "positions(uint256)": {
          "notice": "Returns the position information associated with a given token ID."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin-upgradeable/contracts/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "solady/=lib/solady/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/interfaces/INonfungiblePositionManager.sol": "INonfungiblePositionManager"
    },
    "evmVersion": "paris",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "src/interfaces/INonfungiblePositionManager.sol": {
      "keccak256": "0x51ba80043e1ea7bbdd1f7fb4de12a6415e4b6798af6e004af6b5f9aa342b0036",
      "urls": [
        "bzz-raw://d117f98fee5ac0b34adba78d315057d5731aee2111d6e6476b815f303cde87c3",
        "dweb:/ipfs/QmPDtuMhWfRBbyAWBjnd88jBm4fEhFqmsfkssaUj6L6nav"
      ],
      "license": "GPL-2.0-or-later"
    }
  },
  "version": 1
}
{"content":"Contribution & Service Provider Guide\n\nThis document outlines how to contribute to the **Higherrrrrrr** ecosystem, whether by proposing open-source code improvements or integrating new services as an external provider. Our aim is to maintain **transparent**, **collaborative**, and **innovative** workflows, reflecting the ethos of meme culture fused with high-quality on-chain engineering.\n\n---\n\n1. Introduction\n\n**Higherrrrrrr** is a **Solana-based memecoin launchpad & token evolution framework**. As such, it relies heavily on community-driven innovation. We welcome pull requests (PRs) from the broader community to:\n\n1. **Improve the Codebase**: Fix bugs, add features, refine documentation, or optimize the user experience.  \n2. **Integrate External Services**: Provide specialized tooling (or modules) that the **Higherrrrrrr** protocol can use—potentially bridging analytics, AMM aggregator hooks, or new oracles.\n\nThis guide provides two distinct contribution pathways:\n\n1. **Open-Source Contributions**: Anyone can propose changes or new features through standard pull requests.  \n2. **Service Provider Proposals**: Third-party providers can pitch and implement their service for **Higherrrrrrr** by submitting a PR with transparent pricing and a code integration plan.\n\n---\n\n2. Open-Source Contributions\n\n2.1. Overview & Philosophy\n\nWe maintain a **public** repository of the core **Higherrrrrrr** code (smart contracts, front-end, documentation). The repository embraces standard open-source practices:\n\n- **Transparency**: All relevant code changes are visible on GitHub.  \n- **Collaboration**: Community discussions and reviews happen openly.  \n- **Simplicity**: We try to keep our PR workflow straightforward, so new contributors can hop in easily.\n\n2.2. Contribution Workflow\n\n1. **Fork the Repo**  \n   - Create your own fork of the **Higherrrrrrr** repository on GitHub.  \n   - Clone the fork locally and configure an upstream remote pointing to `origin` (the main **Higherrrrrrr** repo).\n\n2. **Create a Branch**  \n   - Name your branch descriptively (e.g., `fix/conviction-registry-limits` or `feature/new-burn-mechanism`).  \n   - Ensure your work remains isolated and easy to review.\n\n3. **Implement Your Changes**  \n   - Follow any relevant style guidelines or developer notes in the repository.  \n   - Write tests (or update existing tests) to verify your changes, particularly if you’re modifying mission-critical logic (e.g., fee distribution, NFT minting flows).\n\n4. **Commit & Push**  \n   - Commit with descriptive messages so reviewers understand the rationale behind each set of changes.  \n   - Push your branch to your fork.\n\n5. **Open a Pull Request**  \n   - In the upstream (original) repository, open a Pull Request (PR) from your branch.  \n   - Provide a concise yet clear description of your changes, linking any relevant issues or discussions.\n\n6. **Review Process**  \n   - The **Higherrrrrrr** team and community reviewers will offer feedback or request additional changes.  \n   - Once it receives at least **one** official approval from a **Higherrrrrrr** team member *plus* one community co-review (e.g., “1+1 merges”), the PR can proceed to final review.\n\n7. **Merging & Deployment**  \n   - The **Higherrrrrrr** core team typically handles merges into the main branch.  \n   - Upon merge, your changes may be included in the next deployment or release cycle, pending final checks.\n\n2.3. Code Standards & Style\n\n- **Rust (Anchor)** for on-chain logic: Adhere to typical Rust conventions, focusing on clarity, safety checks, and minimal boilerplate.  \n- **TypeScript/JavaScript** for front-end or scripts: Use standard linting and formatting (ESLint, Prettier if configured).  \n- **Markdown** for docs: Keep headings consistent, use concise language, and reference any new sections from the main README where appropriate.\n\n2.4. Communication\n\nIf you’re unsure about a proposal or would like early feedback:\n\n- **GitHub Issues**: File an issue describing your idea or question.  \n- **Community Channels**: Join our Telegram or Discord (where available) to discuss potential improvements before investing time in coding.\n\n---\n\n3. Service Provider Proposals\n\n3.1. Rationale & Approach\n\nBeyond typical open-source contributions, **Higherrrrrrr** also relies on **service providers** who offer specialized integrations—analytics dashboards, bridging solutions, KYC tooling, or custom oracles. Rather than forging exclusive private deals, we want an **open, competitive** environment where multiple providers can propose solutions.\n\n3.2. Proposal via Pull Request\n\nTo integrate your service into **Higherrrrrrr**, submit a **pull request** following this format:\n\n1. **Name & Summary**  \n   - Introduce your company or service (e.g., “XYZ Analytics,” “ACME Bridge,” “Galaxy Oracles”).  \n   - Provide brief context on what your integration accomplishes.\n\n2. **Transparent Pricing & Terms**  \n   - Disclose any fees, revenue splits, or licensing requirements.  \n   - Outline ongoing costs: Are there monthly fees? Per-transaction fees?  \n   - Indicate any free trial or PoC (proof-of-concept) arrangements if applicable.\n\n3. **Technical Integration**  \n   - Show code changes that adapt **Higherrrrrrr** to your service. For example, you might add new instructions, or a module that references your API.  \n   - Provide instructions or environment variables needed for deployment or usage.\n\n4. **Maintenance Plan**  \n   - Explain how you will keep the integration updated (e.g., responding to version changes in **Higherrrrrrr**, or upgrading your own APIs).  \n   - Clarify who is responsible for updates (you, the **Higherrrrrrr** community, or a shared approach).\n\n5. **Test Coverage**  \n   - Include or update test cases that confirm your integration runs correctly.  \n   - For off-chain components, provide local integration tests, or a clear testing procedure.\n\n3.3. Team Review & Decision\n\n- **Open Discussion**: Once your PR is live, the **Higherrrrrrr** team and the broader community will discuss the proposal’s merits.  \n- **Multiple Competitors**: If other providers submit PRs for the same type of service (e.g., multiple analytics solutions), each will be judged on:\n  - Code quality  \n  - Pricing transparency  \n  - Reliability & track record  \n  - Alignment with **Higherrrrrrr**’s values (openness, fairness, comedic meme synergy, etc.)  \n- **Acceptance or Changes**: The team may accept your proposal, request modifications, or decline it if it doesn’t meet security or community expectations.\n\n3.4. Public Signaling & Promotion\n\nWhen there is a high-impact integration need (e.g., “We need an aggregator for bridging between chains”), we may publicly announce a **call for proposals**:\n\n1. **Tweet / Announcement**: The team details what we’re looking for and references the open PR approach.  \n2. **Competing Submissions**: Multiple providers respond with PRs, each presenting their code changes and commercial terms.  \n3. **Community Feedback & Final Decision**: A combination of community polling and team evaluation decides which PR is merged.\n\n3.5. Post-Merge Considerations\n\nAfter merging a service provider’s PR:\n\n1. **Deployment & Testing**: The **Higherrrrrrr** team may run final integration tests in a staging environment or devnet before mainnet deployment.  \n2. **Ongoing Maintenance**: The service provider should remain available to address issues or updates. If the integration requires expansions, further PRs are welcome.\n\n---\n\n4. General Guidelines & Best Practices\n\n- **Respectful Collaboration**: Keep PR and issue discussions constructive. We aim to avoid toxic or unproductive debates.  \n- **Adhere to Security Standards**: Especially for on-chain modifications. Double-check PDAs, signers, integer math, and potential Re-entrancy or cross-program vulnerabilities.  \n- **Documentation**: Whenever you add or modify features, update the corresponding docs.  \n- **Version Control**: For large features or service integrations, consider versioning your doc updates (e.g., `v2.0`, `v2.1`) to keep track of major changes.  \n- **Testing**: The fastest route to an accepted PR is showing that your code is thoroughly tested. If your changes break existing tests, please fix them.\n\n---\n\n5. Conclusion & Next Steps\n\nWe are excited to build the **Higherrrrrrr** ecosystem in a way that marries **memecoin culture** with serious, robust token engineering. By opening up:\n\n1. **Open-Source Development**  \n2. **Service Provider Integrations**\n\nWe believe the community can collectively shape a flexible, evolving platform that benefits all participants.\n\n**Next Steps**:\n\n1. **Fork, Branch, and Code**: If you have a fix or feature in mind—start coding!  \n2. **Open a Service Proposal**: If you have an external service or specialized tool—submit a transparent PR.  \n3. **Engage the Community**: Discuss, refine, and collaborate on improvements.  \n\n**Higherrrrrrr** will grow stronger with each line of code reviewed, each merge completed, and each comedic threshold or NFT minted. We look forward to your contributions!\n\n---\n\n**Questions or Feedback?**  \nReach out on our Telegram or check out our GitHub Issues for open discussion threads and suggestions.\n\n\n---\n\nBelow is a unified, detailed, and comprehensive `CREATORS.md` document that combines the Creatooor’s Guide to the Higher⁷verse with the Higherrrrrrr Content Guidelines. You can copy, adjust, or extend this markdown file as needed for your project.\n\n---\n\nHigher⁷ Creatooor’s Guide & Content Guidelines\n\n*Where cults meet on-chain engineering… all hail the meme!*\n\nWelcome, Creatooor! Whether you’re a seasoned crypto innovator or a pioneering creator stepping into the Higher⁷verse for the first time, this document is your go-to resource. We’ve merged our step-by-step guide for launching your project with our robust content guidelines to ensure that every token, NFT, and piece of metadata meets the Highest standards of creativity, security, and community spirit.\n\n---\n\nTable of Contents\n\n1. Introduction: Welcome to the Higher⁷verse\n2. 1. Evolving Tokens with On-Chain Thresholds\n3. 2. Fee Split & Flexible Tokenomics\n4. 3. Community\n5. 4. Twitter Agent Capabilities\n6. 5. Higherrrrrrr Content Guidelines\n    - 5.1 Scope & Enforcement\n    - 5.2 Disallowed Content\n    - 5.3 Potentially Sensitive or Edgy Content\n    - 5.4 Community Conduct Requirements\n    - 5.5 AI / Automated Screening Process\n    - 5.6 Reporting Mechanisms\n    - 5.7 Future Amendments & Community Input\n    - 5.8 Disclaimer\n7. Final Thoughts & Getting in Touch\n\n---\n\nIntroduction: Welcome to the Higher⁷verse\n\nHello there, and welcome to the most creator-friendly launchpad in crypto! I'm Phil, your dedicated guide in the Higher⁷verse. As a Creatooor, you’re not just here to launch a token; you’re here to create a Cult Coin that evolves, adapts, and inspires a thriving community. Our platform is built on three foundational pillars:\n\n1. **Evolutionary Tokens and Conviction NFTs**  \n2. **Fee Split and Flexible Tokenomics**  \n3. **Community Engagement and Support**\n\nEach of these pillars is designed to help you build a project that’s not only innovative in its technology but also deeply connected to its community. Let’s dive into each element in detail.\n\n---\n\n1. Evolving Tokens with On-Chain Thresholds\n\nHigher⁷ introduces a groundbreaking mechanism: tokens that evolve automatically as they hit predefined market cap milestones. Inspired by the ever-changing nature of internet memes, this process is fully encoded on-chain to provide transparency and trust minimization.\n\nKey Features\n\n- **Automated Milestone Updates**  \n  - Each market cap threshold triggers an automated update to the token’s Metaplex metadata (name, symbol, and image).  \n  - The changes reflect immediately on-chain—no manual re-uploads required.\n  \n- **Conviction NFTs**  \n  - Holders who possess at least **0.042069%** of the total token supply (e.g., 420,690 tokens in a 1B supply) automatically qualify for a Conviction NFT.  \n  - When the token reaches a new threshold, eligible holders can claim the NFT corresponding to that level—provided they register once on our frontend.  \n  - **Important:** NFTs must be claimed *before* the token evolves to the next level. If a wallet’s holdings drop below the threshold, it will not qualify for future NFTs.\n  - These NFTs not only symbolize commitment but may also offer exclusive perks like private game access, special Discord roles, or other rewards.\n\n---\n\n2. Fee Split & Flexible Tokenomics\n\nOur platform offers creators unparalleled flexibility in designing tokenomics that align with your project’s goals. Here’s how Higher⁷’s tokenomics work:\n\nPre-Mint and Team Allocation Options\n\n- **Pre-Mint Options**  \n  - You have the option to pre-mint tokens for your team—up to 15% of the total supply can be allocated.  \n  - Vesting is optional but recommended for community optics. You can choose to vest all or part of this allocation.\n  \nSingle-Sided Liquidity Provision\n\n- **Simplified Liquidity**  \n  - Unlike protocols requiring pairing with SOL or another base asset, Higher⁷ allows you to provide single-sided liquidity using only your project’s token.  \n  - The broader market supplies the corresponding SOL, resulting in a more organic price discovery process and simplifying liquidity management.\n\nDeflationary Mechanism & Fee Distribution\n\n- **Swap Fee Structure**  \n  - Every swap incurs a 1% fee, distributed as follows:\n    - **0.5% Token Burn:** Permanently removes tokens from circulation to increase scarcity.\n    - **0.25% SOL to Liquidity Floor:** Helps stabilize price fluctuations during dips.\n    - **0.25% SOL to Higher⁷:** Supports platform development and maintenance (subject to change based on market conditions).\n  \n- **Creator Fee Splitting**  \n  - You can configure how the 0.5% native token fee is allocated. Options include directing funds to a treasury, charity, or marketing efforts.\n  \nAn Analogy: Trading Pokémon Cards\n\nImagine buying and selling Pokémon cards. Each trade results in a few cards being removed from circulation (burned), and some cash being set aside to support the market during downturns. With fewer cards available, their value increases—creating a healthier, more vibrant ecosystem for everyone. That’s the essence of Higher⁷’s deflationary design.\n\n---\n\n3. Community\n\nAt Higher⁷, we believe that a strong community is as crucial as cutting-edge technology. Our ecosystem is designed to foster collaboration, support, and creativity.\n\nHiLites & Ascending\n\nProjects that best leverage Higher⁷’s features can gain extra visibility:\n\n- **HiLites**  \n  - Projects featured as HiLites are pinned at the top of the Higher⁷ landing page.  \n  - They come with an in-depth write-up by a Higher team member.\n  - **Requirements:**\n    - Team token allocation must be ≤15% with vesting.\n    - Only 3.33% of tokens can unlock immediately; additional tokens must vest linearly.\n    - Founders must be doxxed or have passed KYC (at least with Higher⁷).\n\n- **Ascending**  \n  - Projects that do not meet HiLites criteria but still stand out can be listed under Ascending.  \n  - These projects enjoy flexible tokenomic requirements and are celebrated for their creative use of the platform’s features.\n\nHow to Get Featured\n\n1. **Join the Community:** Engage with us on Telegram and Twitter.\n2. **Build a Badass Concept:** Ensure your idea aligns with the Higher⁷ ethos.\n3. **Pitch or Submit a Proposal:** Active community members receive priority.\n\nEven if you’re not featured as a HiLite or Ascending project, every Creatooor can create a lore page for their Cult Coin using our provided template.\n\nThe Higherrrrrrr Hub\n\n- **Dedicated Channels:** Join our Telegram community to collaborate, share ideas, and get assistance.\n- **Collaboration and Networking:** Use the Hub to form teams, discuss launches, and gain exposure to talented vendors and collaborators.\n- **Community Directory:** Our evolving directory lists trusted vendors for roles such as graphic design, mod services, and creative consultancy—helping you build your project with ease.\n\n---\n\n4. Twitter Agent Capabilities\n\nBoost your project’s social presence with automated social media agents:\n\nAutomated Social Media Agents\n\n- **Large Language Model Integration:**  \n  - Connect various language models to drive dynamic dialogue for your token’s social media presence.\n  - Customize backstories, tone, and personality to match your project’s lore.\n  \n- **Scheduling & Interaction:**  \n  - Set up scheduled posts or automated responses to community mentions.  \n  - Enhance engagement by giving your Twitter agent a unique and engaging persona—be it a wise oracle, playful trickster, or cosmic traveler.\n\nThe better the personality and interaction, the more likely community members will share, discuss, and champion your Cult Coin.\n\n---\n\n5. Higherrrrrrr Content Guidelines\n\nThese Content Guidelines ensure that every project within the Higher⁷ ecosystem remains inclusive, innovative, and safe. They apply to token names, tickers, visual assets, metadata, descriptions, and all other related content.\n\nOur primary objectives are to:\n\n1. **Foster an inclusive and positive environment** for creators and users.\n2. **Prevent harmful, hateful, or illegal content** from proliferating.\n3. **Ensure compliance** with applicable laws and general community standards.\n\n5.1 Scope & Enforcement\n\n- **Who Must Comply:**  \n  - Anyone creating or submitting a token/project through Higherrrrrrr—including third-party collaborators—must adhere to these guidelines.\n\n- **Enforcement Mechanisms:**  \n  - **Automated Screening:** AI tools scan token names, images, and metadata for disallowed content.\n  - **Manual Review:** Moderators review flagged items to ensure accuracy.\n  \n- **Consequences:**  \n  - Non-compliant tokens may be rejected, flagged for removal, or suspended until corrections are made.\n  - Repeated or severe violations can lead to permanent bans from the platform.\n\n5.2 Disallowed Content\n\nYour project must **not** include, depict, or promote any of the following:\n\n1. **Hate Speech & Harassment:**  \n   - No slurs, stereotypes, or incitement of violence toward any protected group.\n   \n2. **Violent or Gory Imagery:**  \n   - Avoid graphic violence or extreme brutality in visual or descriptive content.\n   \n3. **Sexual or Explicit Material:**  \n   - No pornographic or exploitative sexual content, particularly involving minors or explicit graphic depictions.\n   \n4. **Illegal or Dangerous Activities:**  \n   - Content that encourages violent, self-harm, or illegal behavior (including drug promotion, hacking, piracy, etc.) is strictly prohibited.\n   \n5. **Fraudulent or Malicious Intent:**  \n   - Do not impersonate other brands, include phishing links, or create deceptive content designed to scam or mislead users.\n   \n6. **Extremist or Terrorist Organizations:**  \n   - Avoid any references, symbols, or slogans associated with extremist groups.\n   \n7. **Invasion of Privacy / Doxing:**  \n   - Unauthorized sharing of personal data or attempts to reveal private information is forbidden.\n   \n8. **Trademark / Copyright Infringement:**  \n   - Do not use copyrighted or trademarked content without proper authorization. Even satirical references must respect fair use guidelines.\n\n5.3 Potentially Sensitive or Edgy Content\n\nWe understand that meme culture often pushes boundaries with edgy humor. However:\n\n- **Mild Satire & Comedic References:** Allowed if they remain within acceptable limits.\n- **Exaggerated Imagery:** Permitted if the portrayal is cartoonish and clearly intended as satire—not realistic or hateful.\n\n5.4 Community Conduct Requirements\n\n- **Respect:**  \n  - Treat all community members, moderators, and collaborators with courtesy and respect.\n  \n- **No Trolling / Spam:**  \n  - Malicious spamming or inflammatory behavior is not tolerated.\n  \n- **No Misinformation:**  \n  - Projects should avoid spreading falsehoods—especially regarding critical topics like health or finance. Satirical projects must clearly indicate their intent.\n\n5.5 AI / Automated Screening Process\n\nOur submission process includes several layers of content review:\n\n1. **Token Name & Ticker Analysis:**  \n   - AI tools check for hate terms, profanity, extremist references, or trademarked terms.\n   \n2. **Image / Metadata Scan:**  \n   - On-chain images and metadata are scanned for explicit or disallowed visuals.\n   \n3. **Contextual Interpretation:**  \n   - References that are comedic or ironic may be flagged initially but can be approved after manual review.\n   \n4. **Review & Approval:**  \n   - If automated checks pass, your project proceeds. If flagged, our moderation team investigates further before a final decision is made.\n\n5.6 Reporting Mechanisms\n\nIf you encounter content or projects that violate these guidelines, please report them to our moderators via our Telegram Channel. Higherrrrrrr reserves the right to temporarily remove or suspend suspicious content pending investigation.\n\n5.7 Future Amendments & Community Input\n\nThe Higher⁷ ecosystem evolves alongside community feedback. As such:\n\n- **Amendment Proposals:**  \n  - Community members can suggest changes via our governance process or dedicated channels.\n  \n- **Implementation:**  \n  - Any changes will be reviewed thoroughly by the Higherrrrrrr team before being enacted.\n\n5.8 Disclaimer\n\n- **Baseline Guidelines:**  \n  - These guidelines serve as the baseline. Additional local or international laws may also apply.\n  \n- **Liability:**  \n  - Higherrrrrrr is not liable for user-generated content but is committed to maintaining a safe and respectful environment for all participants.\n\n---\n\nFinal Thoughts & Getting in Touch\n\nWe hope you enjoyed this deep dive into the Higher⁷verse—from our innovative on-chain evolution technology and flexible tokenomics to our vibrant community and robust content guidelines. As you embark on your journey to create the next Cult Coin, remember that our team is here to support you every step of the way.\n\nI’m Phil, your point person for all things Higher⁷. If you have any questions, need advice, or simply want to share your creative ideas, don’t hesitate to reach out via Telegram at @philcrumb. We look forward to seeing you shine in the Higherrrrrrr Hub!\n\n---\n\n*All systems go—let’s create something legendary on-chain!*\n\n---\n\n*This document is subject to periodic updates. Please check back often for the latest guidelines and best practices.*\n\n---\n\n“I’m Not a Lawyer” Lawyer Brief\n\n> **Disclaimer:**  \n> This document is **not legal advice**. We are **not** attorneys. This is a **community interpretation** of ongoing regulatory and legal uncertainties in the crypto space, using the so‐called “Trump situation” as a jumping‐off point. Consult a qualified legal professional if you need actual legal counsel.\n\n---\n\n1. Context & Why This Brief Exists\n\n**Situation Summary**:  \n- Recently, a meme coin purportedly associated with ex‐President Trump launched on a blockchain (allegedly or hypothetically).  \n- Insiders may have received a significant share of the token supply, with some of them reportedly dumping (“rugging”) on the market.  \n- Despite the controversy, it seemingly saw massive speculation and huge valuations.  \n- **Key Perception**: Because this big, high‐profile fiasco hasn’t been immediately shut down, some folks might interpret that as “anything goes” in crypto, or “crime is legal now.”\n\n**Purpose**:  \n- Provide a **non‐lawyer** analysis of possible legal/regulatory risks that still exist, despite the chaos.  \n- Remind everyone that big, high‐profile events don’t necessarily create legal precedents for smaller projects.  \n- Clarify **our** community’s stance: We do not condone illegal or fraudulent behavior; we aim to be transparent and mindful of compliance.\n\n---\n\n2. The “Trump Coin” Debacle: Public Perceptions vs. Reality\n\n1. **Alleged Insider Allocations**  \n   - Large insider token allocations can be a red flag for regulators (suggesting possible unregistered securities offerings or manipulative behavior).  \n   - If insiders dump tokens soon after launch, it can be seen as fraudulent or at least harmful to public purchasers.\n\n2. **Massive Valuation & Market Hype**  \n   - Meme coins can inflate rapidly on speculation.  \n   - Public mania does not exempt a project from securities law, consumer protection statutes, or anti‐fraud provisions.\n\n3. **No Immediate Enforcement**  \n   - Regulators (e.g., SEC, CFTC in the U.S.) might take *months or years* to investigate or act, especially if the situation is complex or the main actors are high‐profile.  \n   - Lack of immediate enforcement **does not** translate to legality or acceptance.\n\n**Takeaway**:  \nJust because a high‐profile figure or project appears to do something questionable without instant repercussions **doesn’t** mean smaller projects can follow suit without risk. Enforcement is slow, but it often arrives eventually.\n\n---\n\n3. Potential Legal & Regulatory Theories (High‐Level, Non‐Exhaustive)\n\nBelow are some **general theories** authorities might use to pursue enforcement, if they see wrongdoing:\n\n1. **Unregistered Securities Offerings**  \n   - If a token sale or distribution meets the criteria of an “investment contract” (e.g., the Howey Test in the U.S.), regulators can allege an unregistered securities offering.  \n   - Insider allocations + public promotion + profit expectations = heightened scrutiny.\n\n2. **Market Manipulation or Fraud**  \n   - If insiders coordinate to pump the price, then dump on unsuspecting buyers, that can be construed as **market manipulation** or **fraud**.  \n   - False statements or concealed insider deals can bolster a case.\n\n3. **Commodity Futures or Swap Regulations**  \n   - Certain tokens might be considered commodities (depending on jurisdiction). The CFTC could get involved if there’s any derivatives trading or margin activity.\n\n4. **Consumer Protection Violations**  \n   - If a project is marketed in a misleading way—e.g., unsubstantiated claims about guaranteed returns—consumer protection laws might come into play.\n\n5. **Money Transmission / AML (Anti‐Money Laundering)**  \n   - If a token deals with direct custodial user funds, or if it’s used in a way that might facilitate money laundering, separate regulations (FinCEN in the U.S., for example) could apply.\n\n---\n\n4. “Why Hasn’t the Hammer Dropped?”: Possible Explanations\n\n1. **Regulatory Lag**  \n   - Agencies often have limited resources. They prioritize the largest or most glaring cases, or they wait to gather sufficient evidence.  \n2. **Jurisdictional Complexity**  \n   - Crypto is global; enforcement can require international coordination.  \n3. **Ongoing Investigations**  \n   - Silence doesn’t mean nothing is happening; it may mean investigations are ongoing behind the scenes.  \n4. **Political Calculations**  \n   - If high‐profile individuals are involved, authorities may tread carefully to avoid the appearance of political bias.\n\n---\n\n5. Our Take: How We’re Interpreting Current Conditions\n\nDespite the spectacle around “Trump Coin”:\n- **Regulatory Uncertainty** is still real. We operate under the assumption that any project that looks like an unregistered sale of securities, or that hides insider dumping, **could** be subject to enforcement sooner or later.  \n- **Fair & Transparent Tokenomics** remain paramount. Even if some big players flout transparency, we believe open communication and trust building is critical for a healthy project—and it lowers the risk of regulatory blowback.  \n- **Slow Doesn’t Mean Safe**. Just because agencies are slow to react doesn’t mean they won’t react eventually. Historical precedent shows enforcement can happen months or years after the fact.\n\n---\n\n6. Mitigating Legal Risk (Our Non‐Expert Approach)\n\n1. **Full Disclosure**  \n   - Be honest about token allocations, especially insider/team shares.  \n   - Provide plain‐language explanations of how the token works (supply, burns, fees, etc.).\n\n2. **Avoid “Investment” Promises**  \n   - Don’t publicly guarantee price appreciation, “returns,” or “profits.”  \n   - Emphasize utility, governance, or other non‐investment values.\n\n3. **Transparent Governance / Vesting**  \n   - Lock insider tokens in verifiable contracts, with predictable unlocking schedules.  \n   - Let the community see the vesting addresses so they know you’re not secretly dumping.\n\n4. **Responsiveness & Accountability**  \n   - If community members raise red flags, address them promptly.  \n   - Show a willingness to adapt token mechanics or disclosures if something appears potentially non‐compliant.\n\n5. **Stay Educated**  \n   - Follow reputable legal commentary, crypto compliance blogs, and official regulatory announcements.  \n   - Even though we’re not lawyers, we do our best to keep track of shifting guidelines.\n\n---\n\n7. Conclusion: “Not Legal Advice” Summation\n\n- **Don’t assume** that because a prominent figure or project has not been shut down yet, the legal path is automatically clear.  \n- **We** (and many other projects) strive for transparency and responsible tokenomics precisely to avoid the fate of being accused of scams or unregistered offerings down the road.  \n- Ultimately, **consulting a real lawyer** is the best step. We provide this “non‐lawyer brief” purely as a community resource to highlight general risk factors and broad regulatory concerns in light of the “Trump situation.”\n\n---\n\n**Final Note**: We’ll open‐source this document. Feel free to use or modify it in your own communities—just remember, it’s a **non‐lawyer** perspective and shouldn’t be relied on as legal advice.\n\nStay safe and stay transparent,  \n**The higherrrrrrr Team**\n\nLink to GPT output\n\n\nHigherrrrrrr (ZETA1) Tokenomics Regulatory Thought, Open Source\nAdded Jan 23/2025\n\n**Regulatory Perspective**:\n- We acknowledge potential risks but aim for good-faith operations.\n- Likelihood of major enforcement action is low unless the token becomes extremely large or engages in fraudulent conduct. Our assessment is that the maximum penality could be civil since we're open sourcing everything and documenting our actions with the intention of transparency for the community. Probably the first time a project has done this.\n\n**Conclusion**: We’re upfront about how everything works and continuously document our actions. By remaining honest and transparent, we aim to minimize risk for both us and our community, even as we grow. \n\n\n\n---\n\n[DRAFT] Higherrrrrrrr Investment DAOs Protocol White Paper\n\n> **A Solana-Based Investment DAO Framework with Automated Rebalancing, Dynamic Supply, and Integrated Trading**  \n> *Where creator-seeded share pricing, algorithmic rebalancing via the Jupyter aggregator, inflation-based fee incentives, and a unified trading interface converge—with flexible configurations and seamless integration into the Higherrrrrrrr ecosystem.*\n\n---\n\nTable of Contents\n\n1. Introduction  \n2. Conceptual Vision  \n3. Protocol Architecture  \n4. DAO Tokenomics & Dynamic Supply Mechanics  \n5. Automated Rebalancing via the Jupyter Aggregator  \n6. Fee Structure & Creator Incentives  \n7. Trading Interface Integration  \n8. Governance & Security  \n9. Use Cases & Scenarios  \n10. Deployment & Adoption  \n11. Beyond the Current Scope  \n12. Conclusion  \n13. Appendix\n\n---\n\n1. Introduction\n\n**Higherrrrrrrr Investment DAOs** reimagine on-chain asset management on Solana by fusing dynamic portfolio tracking, automated rebalancing, and creator-driven incentive models into a single, unified framework. With a native token whose supply fluctuates in harmony with its underlying treasury, this protocol transforms traditional investment funds into modular, decentralized organizations. Seamlessly integrated within the Higherrrrrrrr trading interface, Investment DAOs empower both creators and investors to engage in real‑time portfolio management with unparalleled transparency and flexibility.\n\n---\n\n2. Conceptual Vision\n\n2.1. Investment DAO as a Dynamic Index Fund\n\nAt its core, Higherrrrrrrr Investment DAOs create a tokenized portfolio where each native share reflects a proportional claim on an actively managed treasury. Much like an index fund, the underlying assets are distributed according to a target allocation defined by the DAO creator. However, the protocol’s dynamic nature means that every deposit, withdrawal, and market move is instantly accounted for—ensuring that every share remains a true representation of the current portfolio value.\n\n2.2. Empowering Creators & Investors\n\n- **Creator-Seeded Initialization:**  \n  The journey begins with the creator’s deposit of SOL (referred to as “soul”), which establishes the initial share price and seeds the treasury.\n\n- **Automated and Intelligent Rebalancing:**  \n  The DAO leverages the Jupyter aggregator to execute cross-platform trades, aligning the portfolio with pre-set target distributions while accounting for fees and market thresholds.\n\n- **Transparent, Real-Time Trading:**  \n  Integrated directly within the Higherrrrrrrr trading interface, users can interact with Investment DAOs alongside other innovative financial instruments, enjoying a seamless, unified experience.\n\n---\n\n3. Protocol Architecture\n\nHigherrrrrrrr Investment DAOs are built on the Solana blockchain, harnessing its high throughput and low fees to deliver a robust, responsive investment vehicle. The architecture is modular, with key components including:\n\n1. **Initialization Module:**  \n   - Creator deposits SOL to set the initial share price.  \n   - Target portfolio distribution is defined to guide rebalancing.\n\n2. **Dynamic Supply Engine:**  \n   - A native token is minted and burned in response to deposits, withdrawals, and fee accrual—ensuring that token supply always mirrors the treasury’s value.\n\n3. **Rebalancing Core:**  \n   - Integrated with the Jupyter aggregator, this component automates asset rebalancing, executing trades only when economically viable.\n\n4. **Fee & Incentive Mechanism:**  \n   - An inflation-based fee (e.g., 6.9% per annum) is continuously applied, minting new shares for the creator as an incentive for performance and active management.\n\n5. **Trading & Interface Module:**  \n   - A dedicated trading interface unifies DAO operations with the broader Higherrrrrrrr ecosystem, enabling effortless asset management and real-time portfolio oversight.\n\n---\n\n4. DAO Tokenomics & Dynamic Supply Mechanics\n\n4.1. Creator-Seeded Initial Share Pricing\n\n- **Initial Deposit:**  \n  The DAO creator deposits a specified amount of SOL, thereby setting the initial treasury value. For instance, a 100 SOL deposit might correspond to an initial mint of 1,000 shares, establishing a share price of 0.1 SOL per share.\n\n- **Establishing the Baseline:**  \n  This seed deposit not only initiates the treasury but also provides a clear, market-driven baseline for subsequent valuations and share minting.\n\n4.2. Dynamic Token Supply\n\n- **Minting on Deposit:**  \n  When investors contribute additional SOL, the protocol mints new tokens proportionally to the current share price, ensuring that each investor’s stake reflects the real-time value of the underlying portfolio.\n\n- **Supply Adjustments on Withdrawal:**  \n  Similarly, redemptions lead to a burn of tokens, dynamically adjusting the total supply to maintain a precise correlation with treasury assets.\n\n---\n\n5. Automated Rebalancing via the Jupyter Aggregator\n\n5.1. Intelligent Trade Execution\n\n- **Jupyter Integration:**  \n  The protocol leverages the Jupyter aggregator to execute trades across multiple platforms, thereby optimizing for best pricing and liquidity.  \n- **Threshold-Driven Rebalancing:**  \n  Rebalancing actions are triggered either automatically on each deposit or at predetermined intervals—whichever proves more cost-effective given current trading fees and minimum trade sizes.\n\n5.2. Economic Viability & Cost Considerations\n\n- **Fee & Threshold Calculations:**  \n  The rebalancing algorithm rigorously factors in trading fees, ensuring that trades occur only when the benefits outweigh the costs.\n- **Batching & Market Sensitivity:**  \n  Under conditions of rapid, successive deposits or withdrawals, the system may batch trades to optimize execution and reduce cumulative costs.\n\n---\n\n6. Fee Structure & Creator Incentives\n\n6.1. Inflation-Based Fee Mechanism\n\n- **Ongoing Creator Rewards:**  \n  A configurable fee (e.g., 6.9% per annum) is applied through an inflationary mechanism. This fee is minted periodically as additional shares allocated directly to the creator’s account.\n  \n- **Alignment of Interests:**  \n  The inflation-based fee structure ensures that creators are continually incentivized to outperform, as their rewards are directly tied to the growth and efficient management of the DAO’s assets.\n\n6.2. Transparent Fee Accrual\n\n- **On-Chain Accounting:**  \n  All fee-related transactions are fully recorded on-chain, ensuring absolute transparency and verifiability for both creators and investors.\n- **Adjustability:**  \n  The fee percentage is configurable, allowing for dynamic adjustment in response to market conditions and community feedback.\n\n---\n\n7. Trading Interface Integration\n\n7.1. A Unified Higherrrrrrrr Experience\n\n- **Seamless Integration:**  \n  Higherrrrrrrr Investment DAOs live within the broader Higherrrrrrrr trading interface, harmonizing traditional trading with innovative DAO operations.\n  \n- **Interactive Dashboard:**  \n  Users enjoy a comprehensive dashboard that displays real-time portfolio metrics, rebalancing events, fee accruals, and dynamic share pricing—all within an intuitive, aesthetically engaging interface.\n\n7.2. Bridging Diverse Investment Opportunities\n\n- **Cross-Product Synergy:**  \n  By integrating Investment DAOs alongside our flagship memecoin launchpad and evolutionary token frameworks, Higherrrrrrrr provides a one-stop interface for diverse investment strategies.\n- **Enhanced User Engagement:**  \n  The unified trading interface encourages cross-participation, allowing users to seamlessly navigate between speculative, meme-driven assets and actively managed investment vehicles.\n\n---\n\n8. Governance & Security\n\n8.1. Multi-Signature & Upgrade Authority\n\n- **Decentralized Control:**  \n  Initial governance is managed via a multi-signature (multi‑sig) framework, ensuring that no single entity can unilaterally alter protocol parameters.\n  \n- **Path to Immutability:**  \n  Once community trust is established, upgrade authorities can be relinquished, rendering the protocol immutable and safeguarding investor interests.\n\n8.2. On-Chain Transparency\n\n- **Auditability:**  \n  Every transaction—from share minting and burning to rebalancing trades and fee distributions—is recorded on-chain, ensuring full transparency and facilitating community audits.\n  \n- **Security Measures:**  \n  Rigorous security audits, along with continuous monitoring, underpin the protocol’s design, mitigating risks associated with automated trading and dynamic supply adjustments.\n\n---\n\n9. Use Cases & Scenarios\n\n1. **Active Asset Management DAOs:**  \n   - Creators deploy Investment DAOs to manage diversified portfolios, with real-time rebalancing and dynamic share pricing ensuring optimal performance.\n   \n2. **Decentralized Investment Funds:**  \n   - Community-driven investment vehicles where every participant holds a stake in an actively managed, algorithmically balanced treasury.\n   \n3. **Integrated Trading Experiences:**  \n   - Users can switch seamlessly between Higherrrrrrrr’s memecoin projects and Investment DAOs, capitalizing on market opportunities across a unified platform.\n\n4. **Creator-Led Hedge Funds:**  \n   - Ambitious creators can establish hedge-fund-like structures on-chain, with performance-based fee incentives driving continuous innovation and market outperformance.\n\n---\n\n10. Deployment & Adoption\n\n10.1. Step-by-Step Deployment Flow\n\n1. **DAO Creation:**  \n   - The creator deposits a predetermined amount of SOL, thereby setting the initial share price and seeding the treasury.\n   \n2. **Configuration of Target Distribution:**  \n   - Define the ideal asset allocation that will guide subsequent rebalancing actions.\n   \n3. **User Deposits & Dynamic Minting:**  \n   - As investors contribute SOL, new shares are minted based on the current fair market value of the treasury.\n   \n4. **Automated Rebalancing Activation:**  \n   - The Jupyter aggregator executes trades to maintain the target distribution, factoring in economic thresholds and fee structures.\n   \n5. **Interface Integration:**  \n   - Investment DAO operations are surfaced within the Higherrrrrrrr trading interface, offering a seamless user experience.\n\n10.2. Community & Developer Engagement\n\n- **Open Documentation:**  \n  Comprehensive technical documentation and an interactive API are provided for developers to integrate, audit, and extend the protocol.\n  \n- **Transparent Governance:**  \n  Community proposals and multi‑sig decisions ensure that protocol evolutions reflect the collective will of its users.\n\n---\n\n11. Beyond the Current Scope\n\n11.1. Future Expansions\n\n- **Cross-Chain Integration:**  \n  Exploring interoperability with other blockchains and Layer 2 solutions to broaden investment horizons.\n  \n- **Enhanced Rebalancing Strategies:**  \n  Incorporating machine learning and advanced market analytics to further optimize trading decisions.\n  \n- **Additional Incentive Layers:**  \n  Implementing staking, yield farming, or reward tiers to enhance investor engagement and long-term holding.\n  \n- **Modular Upgrades:**  \n  Facilitating plug-and-play modules for future features, ensuring that the protocol evolves alongside market innovations.\n\n---\n\n12. Conclusion\n\n**Higherrrrrrrr Investment DAOs** herald a new era of decentralized, algorithmically managed asset funds on Solana. By blending creator-seeded initialization, dynamic token supply, and intelligent rebalancing via the Jupyter aggregator with an integrated trading interface, the protocol offers:\n\n- **Transparent and Real-Time Valuation:**  \n  Each share is a true reflection of the underlying portfolio’s value.\n  \n- **Incentivized Performance:**  \n  An inflation-based fee mechanism aligns creator incentives with investor outcomes.\n  \n- **Unified User Experience:**  \n  Seamless integration within the Higherrrrrrrr ecosystem ensures that diverse investment strategies coexist harmoniously.\n\nIn merging robust financial engineering with playful, community-focused design, Higherrrrrrrr Investment DAOs set a new benchmark for on-chain investment innovation.\n\n---\n\n13. Appendix\n\n13.1. Key Parameters & Configurations\n\n- **Initial Creator Deposit:**  \n  *Example:* 100 SOL → Establishes 1,000 initial shares at 0.1 SOL per share.\n  \n- **Fee Rate:**  \n  *Example:* 6.9% per annum, implemented via periodic inflation minting.\n  \n- **Rebalancing Thresholds:**  \n  Economic thresholds based on trading fees and minimum trade sizes are configurable to optimize market performance.\n  \n- **Target Asset Allocation:**  \n  Defined by the creator at DAO setup, guiding automated rebalancing actions.\n\n13.2. Security & Audit Trail\n\n- **Multi-Sig Governance:**  \n  Initial operations are managed by a multi‑sig framework, with provisions for transition to full immutability.\n  \n- **On-Chain Data:**  \n  All operations—including share minting/burning, rebalancing trades, and fee distributions—are fully auditable via Solana’s ledger.\n\n---\n\n*By reimagining the conventional investment fund through on-chain dynamism and algorithmic precision, Higherrrrrrrr Investment DAOs empower creators and investors alike—delivering a next-generation financial instrument that is as innovative as it is accessible.*\n\n\n---\n\nHigherrrrrrr Monorepo - Revolutionary Memecoin Launchpad & Token Evolution Framework\n\n🚀 Overview\n\n**Higherrrrrrr** is a groundbreaking **memecoin launchpad and token evolution framework** built with a focus on **community-driven innovation**, **transparency**, and **robust on-chain engineering**. This monorepo contains all the code and resources necessary to run the Higherrrrrrr ecosystem, from Solana smart contracts and EVM services to the frontend application and supporting scripts.\n\nOur aim is to bridge the vibrant world of meme culture with cutting-edge blockchain technology, creating a platform that is both engaging and secure. We leverage token evolution mechanics, conviction NFTs, and advanced trading features to offer a unique and dynamic experience for memecoin creators and communities.\n\nThis monorepo is structured to facilitate modular development and clear separation of concerns between different parts of the Higherrrrrrr ecosystem.\n\n📂 Monorepo Structure\n\nThe repository is organized into the following top-level directories:\n\n\n\n\n✨ Key Features\n\nThe Higherrrrrrr ecosystem is packed with features that blend memecoin culture with robust on-chain functionality:\n\n- **Token Evolution Framework**: Tokens autonomously evolve based on price milestones, reflecting market performance and community growth.\n- **Conviction NFTs**: Unique NFTs awarded to significant token holders, commemorating their early support and participation in token evolution.\n- **Single-sided Liquidity**: Utilizes advanced liquidity provision mechanisms through Orca, ensuring efficient and stable trading.\n- **Real-time Indexing**: Employs TheGraph and Ponder services to index protocol data, providing real-time analytics and data accessibility.\n- **AI-powered Social Automation**: Features AI-driven social media automation, enabling character-driven content generation and engagement.\n- **Performance Optimized Infrastructure**: Leverages custom RPC caching and advanced data indexing for optimal performance and scalability.\n- **Transparent Service Provider Integrations**: Facilitates open and competitive integration of third-party services through a transparent proposal process.\n- **Open-Source Contribution Model**: Encourages community contributions through clear guidelines for open-source code improvements and service provider proposals.\n\n🛠 Technology Stack\n\nThe Higherrrrrrr monorepo utilizes a diverse and powerful technology stack:\n\n- **Frontend**:\n    - **Framework**: Next.js\n    - **Styling**: TailwindCSS\n    - **Wallet Integration**: wagmi, ConnectKit, Capsule SDK\n- **Backend**:\n    - **API Service**: Flask (Python), PostgreSQL\n    - **EVM Services**: Node.js, Docker\n- **Blockchain**:\n    - **Solana**: Anchor Framework (Rust)\n    - **Base Network**: EVM Compatibility\n- **Infrastructure**:\n    - **Indexing**: TheGraph, Ponder\n    - **RPC Caching**: NGINX\n    - **AI Integration**: OpenRouter API\n\n🏃‍♂️ Running the Project\n\nTo run the entire Higherrrrrrr ecosystem locally, you'll need to set up and run each service individually. Refer to the README.md files within each subdirectory in `services/` for detailed instructions. Here's a high-level overview:\n\n1.  **API Service (`services/api`)**:\n    - Set up Python 3.11+ and PostgreSQL.\n    - Configure environment variables in `.env` (copy from `.env.example`).\n    - Install Python dependencies: `pip install -r requirements.txt`.\n    - Run the Flask development server: `flask run`.\n\n2.  **Frontend App (`services/app`)**:\n    - Ensure Node.js 18+ is installed.\n    - Install JavaScript dependencies: `yarn install`.\n    - Configure environment variables in `.env.local` (copy from `.env.example`).\n    - Start the Next.js development server: `yarn dev`.\n\n3.  **Protocol (Solana Contracts) (`services/protocol`)**:\n    - Install Rust, Solana CLI, and Anchor CLI.\n    - Build the Solana program: `anchor build`.\n    - Deploy the program to localnet: `anchor deploy`.\n\n4.  **EVM Services (`services/evm`)**:\n    - **Ponder Indexer (`services/evm/ponder`)**:\n        - Install Node.js dependencies: `npm install`.\n        - Configure environment variables in `.env` (copy from `.env.example`).\n        - Start the Ponder development server: `npm run dev`.\n    - **RPC Cache (`services/evm/rpc`)**:\n        - Ensure Docker is installed.\n        - Build the Docker image: `docker build -t rpc-cache .`.\n        - Run the Docker container: `docker run -p 8080:8080 rpc-cache`.\n    - **Subgraphs (`services/evm/subgraphs`)**:\n        - Requires TheGraph CLI to be installed globally.\n        - Navigate to `services/evm/subgraphs/tokens`.\n        - Configure subgraph manifest (`subgraph.yaml`) with your endpoint.\n        - Build and deploy the subgraph using TheGraph CLI commands (refer to `package.json` scripts).\n\n**Note**: Running all services requires a comprehensive setup and configuration. For development purposes, you might choose to run only the services you are actively working on.\n\n🔐 Security & 📜 Legal\n\n- **Security**:  Refer to SECURITY-POSTURE.md for a detailed overview of the project's security posture, methodologies, and practices.\n- **Legal**:  Consult LEGAL.md for important legal disclaimers and a lawyer brief (non-legal advice).\n- **Tokenomics**:  Detailed tokenomics information can be found in TOKENOMICS.md.\n\n**Disclaimer**: Both `LEGAL.md` and `SECURITY-POSTURE.md` are crucial documents to review before interacting with or contributing to the Higherrrrrrr ecosystem.\n\n🤝 Contributing\n\nWe highly encourage community contributions! Please read CONTRIBUTING.md for detailed guidelines on how to contribute to the project, whether it's through code improvements, feature suggestions, or service provider proposals.\n\n🌐 Resources\n\n- **Github**: https://github.com/higherrrrrrr/higherrrrrrr.fun (Placeholder - documentation is under development)\n- **Website**: https://higherrrrrrr.fun\n- **Twitter**: https://twitter.com/higherrrrrrrfun\n- **Telegram**: https://t.me/higherrrrrrrfun\n- **GitHub Issues**: https://github.com/higherrrrrrr/higherrrrrrrrr.fun/issues (For bug reports and feature requests)\n\n⚠️ Disclaimer\n\n**This project is highly experimental and should be used at your own risk.**  Cryptocurrency and blockchain technologies are inherently risky. Always conduct thorough research and understand the risks involved before interacting with any blockchain protocols or memecoin projects.\n\n📜 License\n\nThis project is licensed under the **WAGMI License** (MIT-Compatible). See LICENSE for the full license text.\n\n---\n\n**We are excited to build the future of memecoins with you!**\n\n**The Higherrrrrrr Team**\n\n---\n\nHigher Social API\n\nA Flask-based API service for managing social media automation for tokens on Base network, featuring Twitter integration and AI-powered tweet generation.\n\nPrerequisites\n\n- Python 3.11\n- PostgreSQL\n- pip\n- virtualenv\n\nInstallation\n\n1. Clone the repository:\n\n\n2. Create and activate a virtual environment:\n\n\n3. Install dependencies:\n\n\n4. Create a `.env` file based on `.env.example`:\n\n\n5. Update the `.env` file with your configuration:\n\n\nDatabase Setup\n\n1. Create the PostgreSQL database:\n\n\n2. Initialize the database migrations:\n\n\nRunning the Application\n\n1. Start the development server:\n\n\n2. For production deployment:\n\n\nDocker Deployment\n\n1. Build the Docker image:\n\n\n2. Run the container:\n\n\nAPI Authentication\n\nThe API uses Ethereum wallet signatures for authentication. To make authenticated requests:\n\n1. Sign the message: `we're going higherrrrrrr`\n2. Include in Authorization header:\n\n\nAPI Endpoints\n\nToken Management\n- `GET /api/token/<address>` - Get token details\n- `POST /api/token` - Create/update token (auth required)\n- `GET /api/token/<address>/creator` - Get verified token creator\n- `GET /api/tokens` - List all tokens with pagination\n\nTwitter Integration\n- `POST /api/twitter/connect/<token_address>` - Start Twitter OAuth flow\n- `GET /api/twitter/callback` - OAuth callback handler\n- `POST /api/twitter/complete` - Complete Twitter connection\n- `POST /api/twitter/disconnect/<address>` - Remove Twitter connection\n\nJob Management\n- `POST /api/jobs/handle-token/<address>` - Process token's social media tasks\n- `POST /api/jobs/tweet/<address>` - Generate and post a tweet\n- `GET /api/jobs/tweet/get/<tweet_id>` - Get tweet details\n\nDevelopment\n\nDatabase Migrations\n\nCreate a new migration:\n\n\nApply migrations:\n\n\nRollback migrations:\n\n\nEnvironment Variables\n\nEssential environment variables:\n- `DATABASE_URL`: PostgreSQL connection string\n- `OPENROUTER_API_KEY`: API key for OpenRouter AI services\n- `TWITTER_API_KEY`: Twitter API key\n- `TWITTER_API_SECRET`: Twitter API secret\n- `CLOUD_TASKS_QUEUE`: Google Cloud Tasks queue name\n- `GOOGLE_CLOUD_PROJECT`: Google Cloud project ID\n- `SERVICE_ACCOUNT_EMAIL`: Google Cloud service account email\n\nTesting\n\nRun tests with:\n\n\nContributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\nLicense\n\nWAGMI (MIT-Compatible)\n\n---\n\nErik Welch                                      @eriknw\n\nMatthew Rocklin    @mrocklin\n\nLars Buitinck                                   @larsmans\n\nThouis (Ray) Jones  @thouis\n\nscoder                                          @scoder\n\nPhillip Cloud                                   @cpcloud\n\nJoe Jevnik                                      @llllllllll\n\n\n---\n\nExtensions allow extending the debugger without modifying the debugger code. This is implemented with explicit namespace\npackages.\n\nTo implement your own extension:\n\n1. Ensure that the root folder of your extension is in sys.path (add it to PYTHONPATH) \n2. Ensure that your module follows the directory structure below\n3. The ``__init__.py`` files inside the pydevd_plugin and extension folder must contain the preamble below,\nand nothing else.\nPreamble: \n\n4. Your plugin name inside the extensions folder must start with `\"pydevd_plugin\"`\n5. Implement one or more of the abstract base classes defined in `_pydevd_bundle.pydevd_extension_api`. This can be done\nby either inheriting from them or registering with the abstract base class.\n\n* Directory structure:\n\n\n---\n\nAbout Aave v3\n\nThis README explains how Aave v3 interest calculation works and how we use the ReserveDataUpdated\nevents to track interest rates.\n\nAave v3 blockchain events\n\nThe ReserveDataUpdated event in ReserveLogic.sol\n(signature 804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a) is triggered whenever the interest rates of a reserve currency are updated.\n\nThe event contains the following attributes:\n\n* address indexed reserve - The currency reserve (AToken address) whose rates were updated.\n* uint256 liquidityRate - Deposit interest rate.\n* uint256 stableBorrowRate - Stable debt interest rate.\n* uint256 variableBorrowRate - Variable debt interest rate.\n* uint256 liquidityIndex - Deposit interest index (to calculate accrued interest between start and end time).\n* uint256 variableBorrowIndex - Variable debt interest index (to calculate accrued interest between start and end time).\n\nNote that Aave v2 triggers events with the same signature. We need to be careful to check the contract address that triggered the event.\n\nEvent-related constants are defined in constants.py.\n\nInterest rate calculation\n\nThe basic interest rates can be read directly from the liquidityRate, stableBorrowRate and variableBorrowRate attributes.\n\nThe attributes are 256-bit unsigned integers multiplied with RAY (10^27). To get the decimal values, we convert the (very big)\nvalues first to Python Decimal objects and divide by 10^27. To get percent values, we multiply those with 100%.\n\nRate calculations are implemented in rates.py.\n\nAPR and APY calculation\n\nAave v3 has its own definition for APR and APY found in https://docs.aave.com/developers/v/2.0/guides/apy-and-apr.\n\nTo get APR and APY values, we apply the formulas to liquidityRate, stableBorrowRate and variableBorrowRate. This\nis implemented in rates.py.\n\nAccrued interest calculation\n\nTo calculate accrued interest for a deposit made at T1 and withdrawn at T2, we need the current liquidity index at both times:\n\n    relative_amount = deposit_amount / liquidity_index(T1)\n    withdraw_amount = relative_amount * liquidity_index(T2)\n    accrued_interest = withdraw_amount - relative_amount\n\nTo calculate accrued interest for a variable interest loan taken at T1 and paid back at T2, we need the current variable borrow index at both times:\n\n    relative_amount = debt_amount / variable_borrow_index(T1)\n    payback_amount = relative_amount * variable_borrow_index(T2)\n    accrued_interest = payback_amount - relative_amount\n\nTo calculate accrued interest for a stable interest loan, we need a slightly more complicated formula defined in\nhttps://github.com/aave/aave-v3-core/blob/v1.16.2/contracts/protocol/libraries/math/MathUtils.solL51. The formula is adapted\nfrom Solidity to Python.\n\nAll accrued interest calculations are implemented in rates.py.\n\nNotes about Aave v3 tokens and contracts\n\nAave v3 uses four types of token contracts:\n* Token contract - The actual token (e.g. DAI)\n* AToken contract - Aave contract for deposited currency (e.g. aPolDAI)\n* VariableDebtToken contract - Aave contract for variable-rate debt (e.g. vPolDAI)\n* StableDebtToken contract - Aave contract for stable-rate debt (e.g. sPolDAI)\n\nAave v3 calculates balance interests algorithmically. Deposit balances are represented by ATokens. Debt balances are represented by VariableDebtTokens and StableDebtTokens. There is a separate AToken, VariableDebtToken and StableDebtToken for each currency reserve.\n\nWhen you deposit currency, ATokens are minted. Aave V3 stores the balance as a scaled value based on the current liquidity index of the reserve. For instance, if 100 tokens are minted and the current liquidity index is 2, the scaled balance stored in the blockchain is 50.\n\nWhen you call AToken.balanceOf(), the function multiplies the scaled balance by the current liquidity index. For instance, if the scaled balance stored in the blockchain is 50, and the current liquidity index is 2, the calculated balance is 100. If the liquidity index increases by 10% to 2.2, the calculated balance is 110.\n\nVariable debt tokens work in the same way as ATokens, using the variable borrow index. Stable debt tokens have a more complicated algorithm for calculating the accrued interest in their balanceOf() method.\n\nNormally the liquidity index and variable borrow index of each currency reserve are updated in every block, as tokens are deposited and borrowed. If there has been no activity for a while, Aave V3 uses the most recent liquidity rate to project the up-to-date liquidity index when calculating balances.\n\nRelevant contracts for reference:\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/tokenization/base/ScaledBalanceTokenBase.solL69 (_mintScaled)\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/tokenization/AToken.solL131 (balanceOf)\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/libraries/logic/ReserveLogic.solL47 (getNormalizedIncome)\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/libraries/math/MathUtils.solL23 (calculateLinearInterest)\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/tokenization/VariableDebtToken.sol (balanceOf)\n* https://github.com/aave/aave-v3-core/blob/v1.16.0/contracts/protocol/tokenization/StableDebtToken.sol (balanceOf)\n\n\n---\n\nSansio\n\nThis folder contains code that can be used by alternative Flask\nimplementations, for example Quart. The code therefore cannot do any\nIO, nor be part of a likely IO path. Finally this code cannot use the\nFlask globals.\n\n\n---\n\nMIT License\n\nCopyright © 2019, Yeray Díaz Díaz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---\n\nCopyright © 2020, Encode OSS Ltd.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n---\n\nCopyright © 2019, Encode OSS Ltd.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n---\n\nBSD 3-Clause License\n\nCopyright (c) 2013-2024, Kim Davies and contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n---\n\nImplementation Notes for Internationalization of Jupyter Notebook\n\nThe implementation of i18n features for jupyter notebook is still a work-in-progress:\n\n- User interface strings are (mostly) handled\n- Console messages are not handled (their usefulness in a translated environment is questionable)\n- Tooling has to be refined\n\nHowever…\n\nHow the language is selected ?\n\n1. `jupyter notebook` command reads the `LANG` environment variable at startup,\n   (`xx_XX` or just `xx` form, where `xx` is the language code you're wanting to\n   run in).\n\nHint: if running Windows, you can set it in PowerShell with `${Env:LANG} = \"xx_XX\"`.\nif running Ubuntu 14, you should set environment variable `LANGUAGE=\"xx_XX\"`.\n\n2. The preferred language for web pages in your browser settings (`xx`) is\n   also used. At the moment, it has to be first in the list.\n\nContributing and managing translations\n\nRequirements\n\n- _pybabel_ (could be installed `pip install babel`)\n- _po2json_ (could be installed with `npm install -g po2json`)\n\n**All i18n-related commands are done from the related directory :**\n\n\n\nMessage extraction\n\nThe translatable material for notebook is split into 3 `.pot` files, as follows:\n\n- _notebook/i18n/notebook.pot_ - Console and startup messages, basically anything that is\n  produced by Python code.\n- _notebook/i18n/nbui.pot_ - User interface strings, as extracted from the Jinja2 templates\n  in _notebook/templates/\\*.html_\n- _noteook/i18n/nbjs.pot_ - JavaScript strings and dialogs, which contain much of the visible\n  user interface for Jupyter notebook.\n\nTo extract the messages from the source code whenever new material is added, use the\n`pybabel` command:\n\n\n\nAfter this is complete you have 3 `.pot` files that you can give to a translator for your favorite language.\n\nMessages compilation\n\nAfter the source material has been translated, you should have 3 `.po` files with the same base names\nas the `.pot` files above. Put them in `notebook/i18n/${LANG}/LC_MESSAGES`, where `${LANG}` is the language\ncode for your desired language ( i.e. German = \"de\", Japanese = \"ja\", etc. ).\n\n_notebook.po_ and _nbui.po_ need to be converted from `.po` to `.mo` format for\nuse at runtime.\n\n\n\n_nbjs.po_ needs to be converted to JSON for use within the JavaScript code, with _po2json_, as follows:\n\n\n\nWhen new languages get added, their language codes should be added to _notebook/i18n/nbjs.json_\nunder the `supported_languages` element.\n\nTips for Jupyter developers\n\nThe biggest \"mistake\" I found while doing i18n enablement was the habit of constructing UI messages\nfrom English \"piece parts\". For example, code like:\n\n\n\nwhere `type` is either \"file\", \"directory\", or \"notebook\"....\n\nis problematic when doing translations, because the surrounding text may need to vary\ndepending on the inserted word. In this case, you need to switch it and use complete phrases,\nas follows:\n\n\n\nAlso you need to remember that adding an \"s\" or \"es\" to an English word to\ncreate the plural form doesn't translate well. Some languages have as many as 5 or 6 different\nplural forms for differing numbers, so using an API such as ngettext() is necessary in order\nto handle these cases properly.\n\nKnown issues and future evolutions\n\n1. Right now there are two different places where the desired language is set. At startup time, the Jupyter console's messages pay attention to the setting of the `${LANG}` environment variable\n   as set in the shell at startup time. Unfortunately, this is also the time where the Jinja2\n   environment is set up, which means that the template stuff will always come from this setting.\n   We really want to be paying attention to the browser's settings for the stuff that happens in the\n   browser, so we need to be able to retrieve this information after the browser is started and somehow\n   communicate this back to Jinja2. So far, I haven't yet figured out how to do this, which means that if the ${LANG} at startup doesn't match the browser's settings, you could potentially get a mix\n   of languages in the UI ( never a good thing ).\n\n1. We will need to decide if console messages should be translatable, and enable them if desired.\n\n1. The keyboard shortcut editor was implemented after the i18n work was completed, so that portion\n   does not have translation support at this time.\n\n1. Babel's documentation has instructions on how to integrate messages extraction\n   into your _setup.py_ so that eventually we can just do:\n\n   \n\nI hope to get this working at some point in the near future. 5. The conversions from `.po` to `.mo` probably can and should be done using `setup.py install`.\n\nAny questions or comments please let me know @JCEmmons on github (emmo@us.ibm.com)\n\n\n---\n\nREADME FIRST\n\nPlease do not add new templates for nbconvert here.\n\nIn order to speed up the distribution of nbconvert templates and make it\nsimpler to share such contributions, we encourage sharing those links on our\nwiki\npage.\n\n\n---\n\nTemplate skeleton\n\nThis directory contains the template skeleton files.\n\nDo not modify the contents of the `../latex/skeleton` folder. Instead,\nif you need to, make modifications to the files in this folder and then run\n`make` to generate the corresponding latex skeleton files in the\n`../latex/skeleton` folder.\n\nIf you would like to share your resulting templates with others, we encourage\nsharing those links on our wiki\npage.\n\n\n---\n\n**This software is dual-licensed under the The University of Illinois/NCSA\nOpen Source License (NCSA) and The 3-Clause BSD License**\n\nNCSA Open Source License\n**Copyright (c) 2019 Kevin Sheppard. All rights reserved.**\n\nDeveloped by: Kevin Sheppard (<kevin.sheppard@economics.ox.ac.uk>,\n<kevin.k.sheppard@gmail.com>)\nhttp://www.kevinsheppard.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimers in the documentation and/or\nother materials provided with the distribution.\n\nNeither the names of Kevin Sheppard, nor the names of any contributors may be\nused to endorse or promote products derived from this Software without specific\nprior written permission.\n\n**THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH\nTHE SOFTWARE.**\n\n\n3-Clause BSD License\n**Copyright (c) 2019 Kevin Sheppard. All rights reserved.**\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\n**THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\nTHE POSSIBILITY OF SUCH DAMAGE.**\n\nComponents\n\nMany parts of this module have been derived from original sources, \noften the algorithm's designer. Component licenses are located with \nthe component code.\n\n\n---\n\n<!---\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n-->\n\nThe ORC and JSON files come from the `examples` directory in the Apache ORC\nsource tree:\nhttps://github.com/apache/orc/tree/main/examples\n\n\n---\n\nBSD 3-Clause License\n\nCopyright (c) 2009-2012, Brian Granger, Min Ragan-Kelley\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n---\n\nMIT License\n\nCopyright (c) 2018 - 2024 Isaac Muse <isaacmuse@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nMatthew Rocklin    @mrocklin\n\nJohn Jacobsen         @eigenhombre\n\nErik Welch                                      @eriknw\n\nJohn Crichton                                   @jcrichton\n\nHan Semaj                                       @microamp\n\nGraeme Coupar     @obmarg\n\nLeonid Shvechikov  @shvechikov\n\nLars Buitinck                                   @larsmans\n\nJosé Ricardo                                    @josericardo\n\nTom Prince                                      @tomprince\n\nBart van Merriënboer                            @bartvm\n\nNikolaos-Digenis Karagiannis                    @digenis\n\nAntonio Lima   @themiurgo\n\nJoe Jevnik                                      @llllllllll\n\nRory Kirchner                                      @roryk\n\nSteven Cutting @steven_cutting\n\nAric Coady                                      @coady\n\n\n---\n\nSilk icon set 1.3 by Mark James <mjames@gmail.com>\n\nhttp://www.famfamfam.com/lab/icons/silk/\n\nLicense: CC-BY-2.5\nor CC-BY-3.0\n\n\n---\n\nPyZMQ's CFFI support is designed only for (Unix) systems conforming to `have_sys_un_h = True`.\n\n\n---\n\nHigherrrrrrr.fun - EVM Alpha\n\nReal-time token trading dashboard for the degen in all of us. Track trending EVM tokens with price action, market caps, and more.\n\nArchitecture\n\n\n\nLocal Development\n\nPrerequisites\n- Node.js 18+\n- Your favorite EVM node URL (Infura/Alchemy)\n- Coffee ☕\n\nSetup\n\n1. Clone the repo:\n\n\n2. Install dependencies:\n\n\n3. Set up your environment:\nCreate `.env.local` with:\n\n\n4. Start it up:\n\n\n5. Visit http://localhost:3000 and watch number go up (hopefully)\n\nContributing\n\nPRs welcome, especially for:\n- More token integrations\n- Better price feed sources\n- Degen-friendly UI improvements\n- Gas optimizations\n\nNotes\n\n- Designed for EVM-compatible chains\n- Price feeds update every minute by default\n- Trend data based on 6hr volume\n- Keep an eye on your RPC rate limits\n\n---\n\nBuilt with 💎🤲 and Next.js\n\n---\n\nNGINX RPC Caching Proxy\n\nA specialized NGINX proxy server configured for caching RPC requests with CORS support and custom header management. This proxy is designed to sit in front of Alchemy's Base Mainnet endpoint, providing caching and rate limiting capabilities.\n\nFeatures\n\n- Request caching based on request body content\n- Intelligent cache control for different RPC methods:\n  - `eth_blockNumber`: 2 seconds cache\n  - `eth_call`: 22 seconds cache\n  - Other methods: no caching\n- CORS support with configurable origins\n- Header sanitization and management using headers-more-nginx-module\n- Cache status monitoring via X-Cache-Status header\n- Debug-level error logging\n- Request body based cache keys\n\nPrerequisites\n\n- Docker\n- Docker Compose (optional)\n\nConfiguration\n\nAllowed Origins\n\nThe proxy is configured to allow requests from:\n- `http://localhost:3000`\n- `https://alpha.higherrrrrrr.fun`\n\nTo modify allowed origins, update the `map $http_origin $is_allowed_origin` section in `nginx.conf`.\n\nCache Settings\n\nCache is configured with the following parameters:\n- Location: `/tmp/nginx_cache`\n- Levels: 1:2\n- Zone: 10MB\n- Maximum size: 10GB\n- Inactive timeout: 60 minutes\n\nBuilding\n\nTo build the Docker image:\n\n\n\nRunning\n\nStart the container:\n\n\n\nUsage\n\nSend your RPC requests to `http://localhost:8080` instead of directly to Alchemy. The proxy will handle caching and CORS automatically.\n\nExample request:\n\n\n\nCache Bypass\n\nTo bypass the cache for a specific request, include the `Cache-Bypass` header:\n\n\n\nMonitoring\n\nThe proxy adds an `X-Cache-Status` header to all responses with the following possible values:\n- `MISS`: The response was not found in the cache\n- `HIT`: The response was served from the cache\n- `BYPASS`: The cache was bypassed\n- `EXPIRED`: The cached response was expired\n- `STALE`: A stale cached response was served\n\nSecurity Considerations\n\n- The proxy removes sensitive headers from upstream responses\n- Origin validation is enforced\n- All requests from non-allowed origins are rejected with 403\n- Preflight requests (OPTIONS) are handled appropriately\n- Upstream API key is embedded in the configuration and not exposed to clients\n\nContributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a new Pull Request\n\nLicense\n\nThis project is licensed under the WAGMI License (MIT-Compatible).\n\n---\n\n🚀 Higherrrrrrr.fun\n\nA new type of asset exchange that unlocks revolutionary forms of onchain expression. Not tokens. Not NFTs. A new meta that transforms memes from ephemeral culture into tradeable capital.\n\n🌟 Overview\n\nHigherrrrrrr.fun is built on the premise that memes are humanity's first truly democratic language - a force that transcends traditional barriers of culture and class. Our platform introduces evolutionary tokens that grow and transform with their communities, creating a new paradigm for digital assets.\n\n🛠 Technical Stack\n\n- Framework: Next.js\n- Styling: TailwindCSS\n- Font: VT323 (Terminal style)\n- Network: Base (EVM)\n\n🚀 Getting Started\n\n1. Clone the repository:\n\n\n2. Install dependencies:\n\n\n3. Run the development server:\n\n\n4. Open http://localhost:3000 in your browser\n\n📑 Project Structure\n\n- `/pages` - Main application routes\n  - `index.tsx` - Landing page with terminal-style animation\n  - `protocol.tsx` - Technical details of the Higherrrrrrr protocol\n  - `theology.tsx` - Manifesto on crypto, religion, and community\n  - `pledge.tsx` - User pledge interface\n  - `faq.tsx` - Frequently asked questions\n\n🎨 Key Features\n\n- Terminal-style interface with animated text\n- Dynamic pledge system for community engagement\n- Comprehensive protocol documentation\n- Revolutionary evolutionary token mechanics\n- Conviction NFTs for historical preservation\n- Points program for early believers\n\n🔗 Important Links\n\n- Main Site: higherrrrrrr.fun\n- Alpha Platform: alpha.higherrrrrrr.fun\n- Twitter: @carlcortright\n\n🤝 Contributing\n\nWe welcome contributions from the faithful. This is a community-driven project built for fun and expression.\n\n⚠️ Disclaimer\n\nThis is an experimental project. Participate at your own risk and only pledge what you're willing to lose. Remember: we're going much, much higherrrrrrr.\n\n📜 License\n\nThis project is licensed under the WAGMI License (MIT-Compatible) - see the LICENSE file for details.\n\n---\n\nBuilt with 💚 by the Higherrrrrrr team. \n\n\n---\n\nHigherrrrrrr Protocol Full Audit\n\n**Audit Title:** Higherrrrrrr Protocol Full Audit  \n**Audit Date:** 2025-02-02  \n**Authors:**  \n- Carl Cortright  \n- o3-mini-pro  \n- o1-pro  \n\n---\n\nTable of Contents\n\n1. Introduction & Scope  \n2. Executive Summary  \n3. Project Overview  \n4. Code Structure & Files  \n5. Methodology  \n6. Detailed Findings  \n   1. High-Level Observations  \n   2. Low-Level Observations & Code Review  \n      - Anchor.toml & Cargo.toml  \n      - README.md & docs/TOKENOMICS.md  \n      - migrations/deploy.ts  \n      - package.json  \n      - programs/protocol/Cargo.toml & Xargo.toml  \n      - programs/protocol/src/errors.rs  \n      - programs/protocol/src/instructions/*  \n      - programs/protocol/src/state/*  \n      - Target Deploy Keypair  \n      - tsconfig.json  \n7. Security Analysis  \n   - Access Control  \n   - Arithmetic Overflows & Underflows  \n   - Token Distribution & Vesting Logic  \n   - Conviction NFTs  \n   - Fee Distribution & LP Mechanics  \n   - Immutability & Upgrades  \n8. Testing & QA  \n9. Recommendations  \n10. Conclusion  \n11. Disclaimer\n\n---\n\n1. Introduction & Scope\n\nThis report contains a comprehensive audit of the **Higherrrrrrr** protocol, which comprises smart contracts (Anchor programs), scripts, and associated configuration files. The audit aims to verify the security, functionality, and correctness of the code. Specifically, we examine:\n\n- The **Rust** smart contracts (using the Anchor framework).  \n- The tokenomics details, distribution instructions, and fee mechanisms.  \n- The usage of third-party crates (e.g., Orca Whirlpools).  \n- The overall design’s alignment with typical Solana and Anchor security best practices.  \n\nOur review spans from logical correctness and code readability to potential vulnerabilities and misconfigurations.\n\n---\n\n2. Executive Summary\n\n- **Overall Code Quality**: The protocol's codebase is generally well-structured, following Anchor best practices. Instruction handlers are separated into modules, and error handling is consistent.  \n- **Key Features**:\n  - Custom token creation with enforced distribution splits.\n  - \"Conviction NFTs\" system to reward large token holders.\n  - Automatic and manual evolution mechanics for token metadata.\n  - Fee vault and distribution logic, splitting fees between protocol and creators.\n  - Single-sided liquidity additions on Orca Whirlpools.  \n- **Findings**:  \n  - We did not identify any critical vulnerabilities that would allow unauthorized minting or seizing of funds.  \n  - A few **low-severity** findings relate to potential improvements in user validation, strict checks on distribution percentages, and immutability preferences.  \n  - The code includes checks for supply overflows, unauthorized usage, and misconfigured accounts.  \n\nOverall, the Higherrrrrrr Protocol appears robust and well-designed for the comedic, community-centric “cult coin” approach outlined in the tokenomics. While we highlight certain items for improvement, the contract structure is generally in line with recommended Solana security practices.\n\n---\n\n3. Project Overview\n\nHigherrrrrrr Protocol\n\n- A memecoin-based protocol on Solana that uses an evolving token concept:\n  - **Fee Mechanism**: 1% total fee on trades, half burned (token side), half added as single-sided liquidity (SOL side).  \n  - **Conviction NFTs**: Addresses holding ≥ 0.042069% of the supply can earn special NFTs during “evolution” events.  \n  - **Evolution**: Token name/metadata changes when certain price or market cap thresholds are met.  \n  - **Distribution**:  \n    - 15% Team & Future expansions (7.77% current, 7.23% future).  \n    - 5% Migration LP Support.  \n    - 15% Base V1 Supporters.  \n    - 65% Single-Sided Launch.  \n\nThe code is an Anchor-based Solana program that covers functionality such as token creation, distribution, fee collection, swap, and automatic metadata evolution.\n\n---\n\n4. Code Structure & Files\n\n\n\n- **Anchor.toml & Cargo.toml**: Project configuration, specifying cluster, wallet, and workspace details.  \n- **README.md**: High-level project information.  \n- **docs/TOKENOMICS.md**: Detailed tokenomics, distribution mechanics, and rhetorical memecoin pitch.  \n- **migrations/deploy.ts**: Basic script for deploying via Anchor’s provider.  \n- **programs/protocol/**: Anchor program code; main business logic is in `src/`:\n  - **errors.rs**: Custom error definitions.  \n  - **instructions/**: Each major operation (create token, evolutions, fee logic, trades, etc.).  \n  - **state/**: Persistent program accounts (e.g. MemeTokenState, EvolutionData, FeeVault).  \n  - **lib.rs**: Anchor entrypoint with declared ID and exported program instructions.  \n- **package.json & tsconfig.json**: JavaScript/TypeScript dependencies and build configs for testing.  \n- **protocol-keypair.json**: Local keypair for the program.\n\n---\n\n5. Methodology\n\nOur audit process involves:\n\n1. **Manual Code Review**: Assess each file’s logic flow, ensuring correct usage of Anchor macros (e.g., `[account]`, `[derive(Accounts)]`), account constraints, and error handling.  \n2. **Automated Analysis**: Use linting and scanning tools to catch potential integer overflows, uninitialized accounts, or suspicious instructions.  \n3. **Functional Testing**: Examine test scripts (if provided) and local environment settings to evaluate coverage.  \n4. **Threat Modeling**: Identify possible scenarios for malicious exploitation, focusing on:\n   - Unauthorized minting or distribution.  \n   - Privilege escalations.  \n   - Fees misdirection.  \n   - Overflow or boundary errors.  \n\nWe also checked the relevant references in the code for CPIs to third-party programs (Orca Whirlpools, MPL Token Metadata) to ensure correct usage.\n\n---\n\n6. Detailed Findings\n\n6.1 High-Level Observations\n\n1. **Use of Anchor**: The code appropriately leverages Anchor’s safety features (e.g., `[derive(Accounts)]`, typed accounts, PDAs).  \n2. **Error Handling**: Custom errors in `errors.rs` are consistently used. The code checks for unauthorized operations, distribution percentage constraints, and insufficient balances.  \n3. **Overflow/Underflow Checks**: The code explicitly checks for possible multiplication overflows (using the `Overflow` error).  \n4. **Immutability**: The `upgrade_authority` can be burned if the team/community desires full immutability, which aligns with best practices.\n\n6.2 Low-Level Observations & Code Review\n\nAnchor.toml & Cargo.toml\n- **Anchor.toml** sets `cluster = \"localnet\"` by default, referencing the local Solana wallet and program ID (`Prot111111111111111111111111111111111111111`).  \n- **Cargo.toml** includes LTO and overflow checks in release profile, which is good for performance and safety.  \n\nNo issues found. We recommend verifying the correct program ID in production.  \n\nREADME.md & docs/TOKENOMICS.md\n- The **README.md** references a ChatGPT link (likely ephemeral) and does not contain code.  \n- **TOKENOMICS.md** thoroughly explains supply distribution, fee mechanism, NFTs, and “floor” concept. The distributions align with code constraints (e.g., 15% team, 5% migration, etc.).  \n\nNo direct code vulnerability here. Documentation is clear and consistent.  \n\nmigrations/deploy.ts\n- A simple deployment script using `anchor.setProvider(provider)`.  \n- No complex logic or security risk in deployment script.  \n\nNo issues found.  \n\npackage.json\n- Basic Node.js dependencies for testing (`mocha`, `chai`, `typescript`) and formatting (`prettier`).  \n- Security concerns are minimal. Just ensure pinned versions if worried about supply chain.  \n\nNo major issues.  \n\nprograms/protocol/Cargo.toml & Xargo.toml\n- **Cargo.toml** references `anchor-lang = \"0.30.1\"` and Orca-related crates.  \n- **Xargo.toml** is default, no custom standard library changes.  \n\nNo issues.  \n\nprograms/protocol/src/errors.rs\n- Defines custom error codes: `Overflow`, `Unauthorized`, `InsufficientBalance`, `InvalidPriceData`, etc.  \n- Well-labeled, descriptive.  \n\nNo issues.  \n\nprograms/protocol/src/instructions\n\n1. **create_meme_token.rs**  \n   - Handles new token creation, distribution, setting pool.  \n   - Validates distribution percentages (non-LP ≤ 35%, remainder = 65% for LP).  \n   - Mints the entire supply, then locks the mint authority.  \n   - **Potential Attack Vector**: If distributions are mis-typed, it could hamper the intended supply. The code checks `is_pool` for exactly one or zero occurrences. If there’s more than one, it errors. This is good.  \n   - The logic sets up an Orca Whirlpools pool with `init_pool`.  \n   - Overall, the function is consistent with the tokenomics doc.\n\n2. **evolutions.rs**  \n   - Manages setting evolutions (`set_evolutions`) and updating metadata (`update_meme_metadata`).  \n   - Bounded at 420 evolutions (arbitrary comedic cap).  \n   - Uses `mpl_token_metadata::instruction::update_metadata_accounts_v2` for on-chain name/URI changes.  \n   - No issues found. Just verify that `metadata_update_authority` is correct.\n\n3. **fee_distribution.rs**  \n   - Initializes a `FeeVault` for protocol & creator vault addresses.  \n   - Allows `handle_withdraw_protocol_sol` and `handle_withdraw_creator_tokens` with respective authority checks.  \n   - Splits LP fees from `lp_fee_account` equally.  \n   - **Potential Attack Vector**: The `lp_fee_account` must match `fee_vault.lp_token_vault`. This is checked for correctness. Good.  \n\n4. **trade_orca.rs**  \n   - Wraps an Orca Whirlpools CPI for swaps.  \n   - Applies a post-swap step to “trigger_evolution” if a threshold is met.  \n   - Uses `get_current_price` from `Whirlpool` data to set the new name/URI if needed.  \n   - No re-entrancy concerns. The CPI is straightforward, and Anchor ensures no cross-call contamination.  \n\n5. **conviction_nfts.rs**  \n   - `handle_register_holder` checks if the user’s token balance is ≥ 0.042069% of total supply.  \n   - `handle_distribute_conviction_nfts` iterates over holders, re-checks if they still meet the threshold, and mints an NFT to them.  \n   - Properly prunes holders if they fall below the threshold.  \n\nOverall, the instructions are segmented well, with security checks in place.  \n\nprograms/protocol/src/state\n\n1. **meme_token_state.rs**  \n   - Stores data about the memecoin (creator, mint, name, symbol, total supply, decimals, pool, image, token_type).  \n   - Straightforward design.  \n\n2. **evolution_data.rs**  \n   - Owner & `Vec<EvolutionItem>` stored.  \n   - `EvolutionItem` has `price_threshold`, `new_name`, `new_uri`.  \n   - Used for dynamic metadata updates.\n\n3. **conviction_registry.rs**  \n   - Holds addresses that meet the threshold.  \n   - Simple `holders` vector.  \n\n4. **fee_vault.rs**  \n   - Basic structure for storing protocol & creator vault addresses.  \n\nStruct definitions are coherent and align with instructions.  \n\nTarget Deploy Keypair\n- `protocol-keypair.json` is a local set of 64 bytes. For production, ensure secure storage and possibly a different authority.  \n\nNo immediate concerns.  \n\ntsconfig.json\n- Basic TS configuration, references mocha/chai types.  \n\nNo issues.  \n\n---\n\n7. Security Analysis\n\n7.1 Access Control\n- **Creator vs. Protocol**: The code consistently checks for the `creator` or `protocol_pubkey` before allowing certain withdrawals.  \n- **PDA Seeds**: The usage of seeds for `conviction_registry` (`b\"conviction_registry\", mint.key()`) and `evolution_data` (`b\"evolution_data\", mint.key()`) is standard and secure.  \n\n7.2 Arithmetic Overflows & Underflows\n- The code uses `checked_mul`, `checked_div`, and error codes to catch overflows.  \n- Solana’s standard for `u64` balances is adhered to.  \n\n7.3 Token Distribution & Vesting Logic\n- The distribution splits are enforced (team ≤ 35% combined with other distributions, 65% or remainder goes to the single-sided pool).  \n- Team tokens are presumably locked in a **Squads multisig** (according to docs, though this is not explicitly coded here). The code at least ensures correct supply distribution at creation.  \n\n7.4 Conviction NFTs\n- The logic is straightforward: The user must reregister if their balance dips below the threshold.  \n- This approach seems functionally correct; no double-mint risk because the `distribute_conviction_nfts` does a re-check.  \n\n7.5 Fee Distribution & LP Mechanics\n- Fees from swaps are stored in the Orca pool fee account. A specialized instruction (`distribute_lp_fees`) splits them between protocol and creator.  \n- This code seems correct and checks the identity of the fee vault.  \n- Single-sided liquidity addition logic is mostly simulated. Real production usage must confirm Orca’s actual instructions.  \n\n7.6 Immutability & Upgrades\n- As typical with Anchor, the program can be upgraded by the upgrade authority unless it’s explicitly removed.  \n- Community governance or a multisig can maintain that authority.  \n- This is a design decision, not a vulnerability.  \n\n---\n\n8. Testing & QA\n\n- **Anchor Test**: The repository’s default `anchor test` scripts can run local tests. We did not see complete test coverage for all instructions, but the structure is present.  \n- We recommend more thorough tests, especially for the NFT logic and fee distributions.  \n\n---\n\n9. Recommendations\n\n1. **Expand Testing**  \n   - Add dedicated tests covering partial edge cases (e.g., distribution percentages, failing scenario for multiple pool instructions, conviction NFT re-check).  \n2. **Document and Verify Actual Deploy Keys**  \n   - Confirm that the final Program ID is the same as `Prot111111111111111111111111111111111111111` in production or that it’s updated in `Anchor.toml`.  \n3. **Enhance or Confirm Team Lock Logic**  \n   - If additional vesting logic is needed for team tokens, implement a specific vesting schedule on-chain or confirm that the external multisig locks them.  \n4. **Review Metadata Authority**  \n   - The `metadata_update_authority` is critical. If a compromised account can update metadata, it could mislead users. Keep it under a robust governance or burn it if not needed after final evolutions.  \n5. **Check Real-World Orca CPI**  \n   - Ensure the `orca_whirlpools_client` usage matches the actual mainnet instructions. The code references a “simulated” single-sided liquidity approach, so confirm it’s correct on mainnet.  \n\n---\n\n10. Conclusion\n\nThe **Higherrrrrrr Protocol** codebase demonstrates a well-structured Anchor program with clear separation of concerns. It includes thorough checks for unauthorized access, distribution percentage validation, and integer overflow. The comedic tokenomics and “Conviction NFTs” approach add novel functionality while remaining consistent with standard Solana practices.\n\nNo critical vulnerabilities were identified. The main areas for improvement lie in additional testing, ensuring secure governance of upgrade authorities, and verifying real-world usage of external CPIs. Once these recommendations are addressed, the protocol can operate with high confidence in its security and correctness.\n\n---\n\n11. Disclaimer\n\nThis audit is a best-effort assessment of the **Higherrrrrrr** protocol at the time of review. It does not guarantee the absence of undiscovered vulnerabilities or that the implementation meets all business goals. Always follow best security practices, maintain a bug bounty program, and have a robust monitoring system in production.  \n\n**End of Report**  \n\n\n---\n\nBelow is a **detailed rewrite** of the security posture and philosophy document, providing expanded explanations and additional context beyond the original. \n\n---\n\nHigherrrrrrr Security Posture & Philosophy\n\n**Table of Contents**  \n1. Introduction  \n2. Security Philosophy  \n   1. Security as a First-Class Citizen  \n   2. Minimize Attack Surface  \n   3. Iterative Development & Review  \n   4. Community Transparency  \n3. Methodologies & Frameworks  \n   1. Threat Modeling  \n      1. STRIDE Framework  \n      2. Attack Trees  \n   2. Solana-Specific Guidelines  \n   3. OWASP-Like Principles for Smart Contracts  \n4. Secure Development Lifecycle  \n   1. Design Review  \n   2. Implementation  \n   3. Automated Testing  \n   4. AI & Manual Audits  \n   5. Iterative Launch  \n5. AI Audits (Almanax & Others)  \n   1. AI-Driven Security Insights  \n   2. Combining AI & Human Expertise  \n   3. Continuous Auditing  \n6. Governance & Upgrade Strategy  \n   1. Multisig  \n   2. Immutability Option  \n7. On-Chain Data Integrity  \n   1. Threshold & Oracle Data  \n   2. PDAs & Seeds  \n   3. Registry Pruning  \n8. Testing & Monitoring  \n   1. Testing Approach  \n   2. Monitoring & Alerts  \n9. Responsible Disclosure  \n   1. Private Reporting  \n   2. Timeline & Rewards  \n10. Future Security Enhancements  \n11. Conclusion  \n\n---\n\n1. Introduction\n\nSecurity is paramount for any on-chain protocol, **especially** one handling real economic value. In our case—a **Memecoin Launchpad** with **fixed supply tokens**, **NFT rewards**, and **fee distribution**—we carefully combine a fun, meme-inspired aesthetic with **robust** development and operational safeguards. \n\nThis document outlines how we conceptualize security from first principles. It details our processes, frameworks, and continuous improvement strategies, aiming to give the community and stakeholders a clear picture of how serious we are about protecting user funds and token stability.\n\n---\n\n2. Security Philosophy\n\nOur approach to security revolves around **proactive design**, **open communication**, and **continuous iteration**.\n\n2.1. Security as a First-Class Citizen\n\n- We incorporate security **from day one** of protocol design.  \n- Instead of “bolting on” security controls after the fact, each architectural decision—such as using **Program Derived Addresses (PDAs)** for fee vaults or employing threshold-based evolutions—goes through a security review.  \n- By doing so, we reduce the likelihood of major reworks or last-minute patching.\n\n2.2. Minimize Attack Surface\n\n- We strive to keep the codebase and architectural setup **as simple as possible**.  \n- **Fewer** features or external dependencies usually mean fewer ways for an attacker to exploit the system.  \n- For example, we limit the usage of 3rd-party CPIs, carefully validate seeds for PDAs, and restrict who can sign critical transactions.\n\n2.3. Iterative Development & Review\n\n- Security is not a **single event** or a “check the box” exercise; it’s an ongoing process.  \n- We employ an agile methodology where every new feature—be it bridging, advanced liquidity, or NFT awarding logic—undergoes an internal design review and is then tested with security in mind.\n\n2.4. Community Transparency\n\n- Transparency is vital:  \n  - We share **essential design details** (e.g., how PDAs are derived, how fees are split, thresholds for evolutions).  \n  - We strive to publish **audit findings** and known limitations.  \n- Meme tokens often attract large but fast-moving communities, so open communication helps everyone understand the **real** risk profile and fosters trust in the protocol.\n\n---\n\n3. Methodologies & Frameworks\n\nWe combine **traditional software security approaches** (like threat modeling and the secure development lifecycle) with **blockchain-specific** best practices (e.g., Solana PDAs, aggregator/oracle integrations, minimal trust bridging).\n\n3.1. Threat Modeling\n\nWe employ both **STRIDE** and **Attack Trees** to identify vulnerabilities early:\n\nSTRIDE Framework\n\n- **Spoofing**: Could an attacker impersonate a user or a signatory?  \n- **Tampering**: Could they alter data on-chain, such as account balances or thresholds?  \n- **Repudiation**: Are there logs and traces of what has happened, preventing an attacker from denying actions?  \n- **Information Disclosure**: Could an attacker access private seeds or config data?  \n- **Denial of Service**: Could the protocol be spammed or forced into a frozen state?  \n- **Elevation of Privilege**: Could an attacker gain unauthorized access to mint authorities, upgrade keys, or PDAs?\n\nWe systematically apply each threat category to different protocol components (mint authority, PDAs, program upgrade authority, etc.) and document mitigations.\n\nAttack Trees\n\n- For critical flows (e.g., a user trading via an AMM or the protocol awarding an NFT), we map out potential malicious steps.  \n- **Attack trees** highlight single points of failure, privilege escalation paths, or potential misuse of instructions.\n\n3.2. Solana-Specific Guidelines\n\n- **PDA Authority**: We carefully choose seeds for PDAs so no collisions occur. We also ensure that the program checks the correctness of signers (`signer seeds`) before allowing critical state changes.  \n- **Anchor Security Checks**:  \n  - We rely on macros like `[account(init, payer = user, space = X)]` and add **custom** validations where necessary.  \n  - For instance, to withdraw from a fee vault, we confirm that only the correct signers are present and that the account in question indeed matches the expected vault address.  \n- **Rent Exemption & Data Size**:  \n  - We handle data sizing to avoid partial closings or forced reclaims.  \n  - Ensuring the accounts are rent-exempt helps avoid unexpected runtime closures of important program accounts.\n\n3.3. OWASP-Like Principles for Smart Contracts\n\nThough **OWASP** primarily focuses on web applications, many concepts adapt well to on-chain:\n\n- **Least Privilege**:  \n  - Only specific keys (often behind a multi-signature or time-lock) can mutate critical state like metadata or distribution parameters.  \n  - Fee withdrawal is similarly restricted: the protocol has a vault, and the creator has another.  \n- **Input Validation**:  \n  - We check user-provided arguments for anomalies—e.g., ensuring threshold inputs aren’t nonsensical or that we don’t allow arithmetic overflows (Rust already has some built-in checks, but we add explicit ones as well).  \n- **Logging**:  \n  - Key state changes generate on-chain events using `msg!()`, enabling historical lookups and detailed debugging if something goes wrong.\n\n---\n\n4. Secure Development Lifecycle\n\nWe follow a **multi-stage** approach, ensuring security is baked in from design to deployment:\n\n4.1. Design Review\n\n- Each new module or feature starts with a **whiteboard session** or internal doc discussing potential threats and mitigations.  \n- We maintain a “design doc” repository with inline comments that question potential security pitfalls (e.g., “What if a malicious user manipulates this aggregator feed?”).\n\n4.2. Implementation\n\n- Our devs use standard secure coding practices for Rust on Solana, including:  \n  - Thorough checks of **PDA seeds**.  \n  - Validating **account owners** and **account addresses** against expected program IDs.  \n  - Using safe math patterns where numeric overflows might occur (although Rust’s `checked_mul` or `checked_add` typically covers us).\n\n4.3. Automated Testing\n\n- **Unit Tests**:  \n  - For each instruction (e.g., creating a memecoin, registering a big holder, updating metadata), we test normal, boundary, and adversarial scenarios.  \n- **Integration Tests**:  \n  - We spin up a local validator or use Solana Devnet to replicate real user flows, including trades, threshold crossing, or NFT awarding sequences.  \n\n4.4. AI & Manual Audits\n\n- Before major releases (e.g., new bridging or liquidity mechanics), we do an **AI-based** scan using tools like **Almanax** to highlight typical vulnerabilities, such as unverified signers or potential re-entrancy.  \n- We complement automated scans with **human** code reviews by internal and external experts who check for project-specific logic errors or assumptions AI might overlook.\n\n4.5. Iterative Launch\n\n- We prefer an **incremental release process**:  \n  1. Deploy to Devnet.  \n  2. Gather feedback, run load tests, or simulate attacks.  \n  3. Deploy to Mainnet with limited initial liquidity or locked parameters, so if an issue arises, the impact is minimized.  \n\n---\n\n5. AI Audits (Almanax & Others)\n\n5.1. AI-Driven Security Insights\n\n- Tools like **Almanax** parse the codebase, searching for known vulnerabilities, standard anti-patterns, or suspicious logic flows.  \n- These tools can flag potential re-entrancy (though less common on Solana) or highlight unverified signers, unsafe assumptions about account addresses, etc.\n\n5.2. Combining AI & Human Expertise\n\n- **No single method** is foolproof. AI might miss context-specific issues or generate false positives.  \n- By cross-verifying with human reviewers—both internal developers and external security auditors—we can triage and confirm any findings, discarding false positives and prioritizing genuine issues.\n\n5.3. Continuous Auditing\n\n- Each **significant code change** triggers a new round of scanning.  \n- This is integrated into our CI pipelines, ensuring that newly introduced features or bug fixes get re-checked for security regressions.\n\n---\n\n6. Governance & Upgrade Strategy\n\n6.1. Multisig\n\n- We typically store the **upgrade authority** in a multi-signature wallet (e.g., Squads).  \n  - This prevents a single compromised key from shipping malicious upgrades.  \n- Similarly, for fee distribution, we have separate vaults for the protocol and the creator. Each can be controlled by a multi-signature if needed.\n\n6.2. Immutability Option\n\n- Once a token matures and the community demands total **trustlessness**, we encourage the upgrade authority to be permanently **burned**.  \n- Alternatively, if partial flexibility is needed (e.g., for emergency fixes), we retain the upgrade authority under a **time-lock** or **DAO** governance process.  \n  - This gives the community ample notice if a contract upgrade is proposed, letting them exit if they disagree.\n\n---\n\n7. On-Chain Data Integrity\n\n7.1. Threshold & Oracle Data\n\n- Many of our “evolution triggers” rely on external signals (price feeds or aggregator inputs).  \n- We use reputable oracles like **Pyth** or **Switchboard** or, where user-supplied data is necessary, we require that the data be **signed** by a recognized authority.  \n- All thresholds (e.g., 0.42069% for big holders) are stored on-chain in a `MemeTokenState` or `EvolutionData` account, so changes are transparent.\n\n7.2. PDAs & Seeds\n\n- For critical accounts (like fee vaults or conviction registries), we rely on stable seeds (e.g., `[b\"fee_vault\", mint_pubkey]`) that the program verifies.  \n- This ensures attackers cannot forge or misdirect an account by mimicking the seeds.\n\n7.3. Registry Pruning\n\n- Our **Conviction Registry** automatically prunes addresses that no longer meet the threshold.  \n- This helps keep the registry manageable, prevents bloat, and ensures that only current big holders get NFT rewards.\n\n---\n\n8. Testing & Monitoring\n\n8.1. Testing Approach\n\n1. **Unit Tests**  \n   - Validate each instruction in both typical and edge-case scenarios (e.g., boundary checks for threshold-based logic).  \n2. **Integration Tests**  \n   - Combine multiple instructions to test real user flows. For example, user buys tokens -> crosses threshold -> triggers evolution -> claims NFT.  \n\n8.2. Monitoring & Alerts\n\n- Once deployed, we or community members may run watchers to track large trades, suspicious transactions, or big fee withdrawals.  \n- If suspicious behavior is detected, the protocol can respond quickly—e.g., by revoking upgrade authority or implementing additional checks, if upgradeability is still available.\n\n---\n\n9. Responsible Disclosure\n\n9.1. Private Reporting\n\n- We provide a secure channel (like a dedicated email or a bug bounty platform) for **white hats** to report critical vulnerabilities privately.  \n- This approach ensures we have time to address issues before they are public, preventing malicious exploitation.\n\n9.2. Timeline & Rewards\n\n- We typically respond within **48 hours** to major vulnerability disclosures, coordinating any emergency patch or user notice.  \n- Depending on the severity and the protocol’s resources, **bug bounties** or acknowledgments may be offered to encourage ongoing community involvement in security.\n\n---\n\n10. Future Security Enhancements\n\nWe acknowledge that security is an **ever-evolving** field. Our roadmap includes:\n\n1. **Formal Verification Tools**  \n   - Exploring tools that can check invariants at the bytecode or IR level, especially for the bridging logic or advanced liquidity.  \n2. **DAO-Managed Parameters**  \n   - Shifting from a single admin approach to a fully on-chain voting system for critical changes like new thresholds, expansions, or major upgrades.  \n3. **Advanced AI Integrations**  \n   - Beyond initial code scanning, we aim to utilize AI-driven anomaly detection for real-time on-chain transaction patterns.  \n\n---\n\n11. Conclusion\n\nSecurity is a **holistic, continuous process**, and we take it seriously—despite the comedic spirit of a “cult memecoin.” Our foundation rests on:\n\n- **Upfront security design**: Minimizing complexity, using PDAs, restricting critical operations.  \n- **Regular audits**: Combining AI-based scanning (e.g., **Almanax**) with rigorous manual reviews.  \n- **Transparent governance**: Encouraging multi-signature setups and the possibility of burning upgrade authority for full immutability.  \n- **Responsible disclosure**: Ensuring white hats have a safe channel to report vulnerabilities, and the community has the final say on major protocol changes.\n\nBy adhering to these principles, we aim to maintain **high trust** in our Memecoin Launchpad and ensure every stakeholder—casual user or dedicated “zealot” holder—can confidently engage without fear of losing funds or suffering exploitative manipulations. We will continue to iterate and improve as the protocol matures, balancing playful meme culture with strong, layered security measures.\n\n---  \n\n*Document Version: 2.0 — Updated for comprehensive coverage of threat modeling, on-chain data integrity, and AI-based audits.*\n\n---\n\nSECURITY.md\n\n**A Comprehensive Audit & Security Review of the Memecoin Protocol**\n\nThis document consolidates an **extensive security analysis** of the entire Memecoin Protocol codebase, covering Steps 1–6. Below we examine each instruction and data structure for potential vulnerabilities, best practices, and recommended mitigations. We focus on **Anchor**-based Solana development, cross-program invocations (Orca, Metaplex), big-holder NFTs, and fee distribution logic. This is an **AI-driven** audit with additional manual reasoning, intended to guide final fixes and risk mitigation before mainnet deployment.\n\n---\n\nTable of Contents\n\n1. Introduction  \n2. Global Observations & Best Practices  \n3. Data Structures & Potential Risks  \n4. Instruction-by-Instruction Analysis  \n   1. Step 2: `create_meme_token`  \n   2. Step 3: Evolutions (`set_evolutions` & `update_meme_metadata`)  \n   3. Step 4: `trade_via_orca` & Single-Sided Liquidity  \n   4. Step 5: Conviction NFTs (`register_holder`, `distribute_conviction_nfts`)  \n   5. Step 6: Fee Distribution & Protocol Liquidity  \n5. Upgrade Authority & Governance Concerns  \n6. Integer Overflow & Math Checks  \n7. Metaplex/Orca CPIs & External Integrations  \n8. Recommended Mitigations & Fixes  \n9. Conclusion & Next Steps\n\n---\n\n1. Introduction\n\nThe **Memecoin Protocol** is a Solana program that lets projects:\n\n- Create **fixed-supply** tokens (locked mint authority).  \n- Implement **threshold-based evolutions** of on-chain metadata.  \n- Reward large holders with **Conviction NFTs**.  \n- Collect **fees** on trades, distributing SOL-based fees to the **protocol** and token-based fees to the **creator**.  \n- Optionally deposit fees into **liquidity pools** for protocol-owned liquidity.\n\nThis **SECURITY.md** aims to highlight **potential vulnerabilities** or **logic gaps** and confirm the code’s alignment with best practices. It’s based on the sample code from:\n\n1. **Step 2**: `create_meme_token`  \n2. **Step 3**: `set_evolutions` & `update_meme_metadata`  \n3. **Step 4**: `trade_via_orca`, single-sided liquidity  \n4. **Step 5**: `register_holder`, `distribute_conviction_nfts`  \n5. **Step 6**: FeeVault instructions for fee distribution\n\n*(Note: Step 1 covered a minimal scaffold, Step 7 covers testing & deployment. We assume Steps 7–8 are final QA & security steps.)*\n\n---\n\n2. Global Observations & Best Practices\n\n1. **Anchor Usage**  \n   - The code uses Anchor’s `[account(init)]` macros, signers, seeds, etc. This is beneficial, as Anchor enforces many security checks (like verifying the correct owner for PDAs and ensuring signers match the instruction definition).  \n\n2. **Program-Derived Addresses (PDAs)**  \n   - Each major data structure (e.g., `MemeTokenState`, `EvolutionData`, `ConvictionRegistry`, `FeeVault`) is assigned stable seeds. This is crucial to prevent collisions or malicious re-initialization.  \n\n3. **No Re-Entrancy**  \n   - Typical re-entrancy attacks in EVM-like blockchains are less relevant on Solana. The code does not appear to store user-lamports mid-instruction in a vulnerable manner. So re-entrancy is not a major concern here.\n\n4. **Authority Checks**  \n   - Many instructions require correct signers (e.g., `creator`, `protocol_pubkey`, `creator_pubkey`). The code typically uses `require_keys_eq!` or Anchor’s `[account(signer)]` approach for validation. This is a good approach, though we recommend verifying all references to ensure no “wildcard” signers can circumvent logic.\n\n5. **Immutable vs. Upgradable**  \n   - The user is advised to place the **upgrade authority** behind a multisig or set it to `None` for immutability. If left upgradable, there’s a risk the program can be replaced by malicious code if the upgrade authority is compromised. This is a standard best practice in the Solana ecosystem.\n\n---\n\n3. Data Structures & Potential Risks\n\n3.1. `MemeTokenState`\n\n\n\n- **Risk**: Strings (`name`, `symbol`) can vary in length. The space calculation must ensure enough bytes for these. Otherwise, dynamic string length could lead to out-of-bounds writes. The code typically does `(4 + name.len()) + (4 + symbol.len())` in `[account(init)]` to handle that, which is correct so long as the user doesn’t exceed expected string size.  \n- **No** direct risk of overflow, as `u64` for supply is typically safe if well-checked. However, code must watch for `total_supply * 10^decimals` overflow (see Section 6).\n\n3.2. `EvolutionData`\n\n\n\n- **Risk**: The `Vec<EvolutionItem>` can become large. The code must ensure enough space for storing all items; otherwise, it can cause dynamic memory constraints.  \n- **Sorting**: If items are unsorted, you might inadvertently skip thresholds or revert. Typically not a security issue, more a design flaw possibility.\n\n3.3. `ConvictionRegistry`\n\n\n\n- **Risk**: If `holders` can grow unbounded, the account can run out of space or cause runtime errors. Typically, the code ensures a limited number of big holders.  \n- **Logic**: `register_holder` ensures the user meets the threshold. This must be re-checked each distribution event to prune stale addresses.\n\n3.4. `FeeVault`\n\n\n\n- **Risk**: If incorrect signers can call `withdraw*` instructions, they could steal fees. Code references show `require_keys_eq!(fee_vault.protocol_pubkey, signer, ...)` etc. That is good.  \n- **No** direct risk from storing public keys. Just ensure no unprotected instructions let an attacker reinitialize or overwrite it.\n\n---\n\n4. Instruction-by-Instruction Analysis\n\n4.1. `create_meme_token` (Step 2)\n\n\n\nPotential Issues:\n\n1. **Integer Overflow**:  \n   - `(total_supply * 10^decimals)` might overflow `u64` if `total_supply` is large (e.g., 1e10) and decimals=9. Code uses `checked_mul(10u64.pow(decimals as u32))` with an `Overflow` error, which is correct.  \n2. **Mint Authority**:  \n   - Immediately set to `None` after minting the full supply, so no further tokens can be minted. Good for a locked-supply approach.  \n3. **Space Calculation**:  \n   - The code in `[account(init, payer = creator, space = ...)]` must match `(4 + name.len()) + (4 + symbol.len()) + 8 + 1 + 32 + 32`. Typically done carefully. Otherwise, we risk partial initialization.  \n4. **Access Control**:  \n   - Typically only a “creator” can call this. If the design wants a fully open approach, that’s not a vulnerability per se, but might cause spam or repeated tokens.\n\n**Verdict**: Implementation is safe if the `Overflow` checks are used consistently and strings remain small enough for the allocated space.\n\n---\n\n4.2. Evolutions (`set_evolutions`, `update_meme_metadata`) (Step 3)\n\n`set_evolutions`\n\n```rust\npub fn set_evolutions(ctx: Context<SetEvolutions>, items: Vec<EvolutionItem>) -> Result<()> {\n  // ensures `ctx.accounts.evolution_data.owner == ctx.accounts.owner.key()`\n  // stores items in evolutions\n}\n```\n\n- **Risk**: If `owner` is not properly checked, an attacker could override thresholds. The code does a `require_keys_eq!`, so that’s good.  \n- **Memory**: If `items` is large, we must ensure account has enough space. Otherwise, safe.\n\n`update_meme_metadata`\n\n\n\n- **Risk**: The price might be user-supplied. If no external oracle is used, a user could pass an inflated `current_price` and forcibly rename the token. That’s not a direct exploit, but it breaks the intended logic. We strongly recommend verifying or trusting an oracle feed.  \n- **Metaplex CPI**: The code calls `update_metadata_accounts_v2`. The **`metadata_update_authority`** must match the actual Metaplex metadata’s update authority. If not, the call fails. Good design ensures the program or a designated address is indeed the update authority.  \n- **No** user funds are directly at risk here, but spoofing the price triggers comedic or undesirable name changes if not using a real price feed.\n\n**Verdict**: The evolutions logic is safe if you trust the `current_price` source. Otherwise, malicious price inputs can cause “fake” evolutions. This is more of a design/trust concern than a vulnerability in code.\n\n---\n\n4.3. `trade_via_orca` & Single-Sided Liquidity (Step 4)\n\n\n\n- **Risks**:\n  1. **Fee** is not forcibly implemented in Step 4 code, only a demonstration. If the final code doesn’t do robust fee checks, the protocol might fail to collect revenue. That’s not a security vulnerability per se, just a design flaw.  \n  2. **Orca** Integration: If the user passes invalid pool accounts or tries to swap with an incorrect pool, we rely on Orca’s code to reject. We must ensure we pass the correct addresses.  \n  3. **Compute Budget**: If the user triggers a large evolution update or NFT distribution in the same transaction, it might exceed compute. Not strictly a security hole, but can cause DoS if the transaction is too large.  \n\nSingle-Sided Liquidity\n\n\n\n- **Risk**: If the AMM requires some base side (SOL/USDC) or an initial ratio, a purely single-sided deposit might fail. If your design is truly 0 base side, that’s unusual but not a direct security flaw.\n\n**Verdict**: The main risk is ensuring the user can’t supply invalid pool accounts to exploit something. Typically, orca’s program ID check should mitigate that. Also, ensure fees are consistent if you do partial token-based or SOL-based. No direct exploit if used properly.\n\n---\n\n4.4. Conviction NFTs (`register_holder`, `distribute_conviction_nfts`) (Step 5)\n\n`register_holder`\n\n\n\n- **Risks**:\n  1. **User Balance**: The code references `user_token_account.amount`. If the user supplies a token account that does not actually belong to them, Anchor constraints or checks are needed to ensure `user.key == user_token_account.owner`. Otherwise, they might pass someone else’s big balance to get themselves registered.  \n  2. **Threshold Calculation**: We do `(raw_supply * 42069) / 10000000`. Potential integer overflow is handled with `checked_mul`, `checked_div`. Good.  \n  3. **Registry Growth**: If many addresses try to register, we can exceed the account’s allocated space. Typically, that fails at runtime, so not an exploit, but can cause user friction.\n\n`distribute_conviction_nfts`\n\n\n\n- **Risks**:\n  1. **Compute Budget**: If many holders qualify, we might run out of compute in a single transaction. Possibly break into multiple calls or an off-chain approach. Not a direct security hole but can cause partial distribution.  \n  2. **NFT Mint**: Each minted NFT requires a new mint, new metadata, or an existing “edition.” The code must handle Metaplex signers properly. If an attacker subverts the “authority,” they might mint infinite NFTs. Not necessarily a direct funds exploit, but can degrade trust.  \n  3. **Balance Checking**: We need the user’s actual token account. If we rely on an off-chain script to pass them in as “remaining accounts,” an attacker might supply a token account with a faked balance. Typically, you do a normal `Account<token::TokenAccount>` which ensures the correct data layout.\n\n**Verdict**: The logic is safe as long as (a) token accounts are verified, (b) minted NFTs do not pose an economic risk if minted wrongly. The user must ensure the code doesn’t have infinite loop or memory constraints with large holder sets.\n\n---\n\n4.5. Fee Distribution & Protocol Liquidity (Step 6)\n\n**`FeeVault`**:\n\n\n**`trade_via_orca`** or similar now skims fees. We see instructions:\n\n- `withdraw_protocol_sol`\n- `withdraw_creator_tokens`\n\nPotential Vulnerabilities:\n\n1. **Unauthorized Withdraw**  \n   - Must ensure only `protocol_pubkey` can call `withdraw_protocol_sol`, only `creator_pubkey` can call `withdraw_creator_tokens`. The code typically does a `require_keys_eq!(fee_vault.protocol_pubkey, ctx.accounts.protocol_signer.key())`. That’s correct. A single missed check is catastrophic.  \n2. **SOL Vault**  \n   - If using a raw system account for `protocol_sol_vault`, direct lamport manipulation requires caution (`**account_info.lamports.borrow_mut()`). Ensure checks for `>= amount` exist.  \n3. **Token Vault**  \n   - Must sign with the correct authority to do an SPL `transfer`. The code’s approach is correct: it references `creator_signer` and ensures it matches `creator_pubkey`.  \n4. **Fee Rate**  \n   - If the code is left modifiable at runtime (lack of a final “locked” param), an attacker might set the fee to 100%. Not necessarily a bug if you want that flexibility, but be sure to store fee rates\n\n---\n\nBelow is a **highly detailed** Technical Design Document (TDD) for a **Solana-Based Memecoin Launchpad & Evolutionary Token Platform**. While it reiterates the same **core** architecture and logic as prior drafts, this version expands on **all** relevant data structures, interactions, validations, and potential corner cases, giving you the **longest** and most **comprehensive** overview possible. \n\n---\n\nMemecoin Launchpad & Evolutionary Token Platform – Technical Design (Extended Version)\n\nTable of Contents\n\n1. Introduction & Motivation  \n2. High-Level Goals  \n3. Core Accounts & PDAs  \n4. Instruction-Level Workflows  \n5. Fee Collection & Distribution  \n6. Metadata Evolutions & NFT Rewards  \n7. Single-Sided Liquidity & AMM Integration  \n8. Security Considerations  \n9. Possible Extensions & Future Work  \n10. Conclusion\n\n---\n\n1. Introduction & Motivation\n\nThe **Memecoin Launchpad & Evolutionary Token Platform** (hereafter, the “Platform”) on Solana is designed to streamline the **creation** and **management** of community-driven tokens that incorporate:\n\n- **Fixed Supply Mechanics**: A fully minted supply (e.g., 1 billion tokens with 9 decimals) that is locked at creation.  \n- **Dynamic, Threshold-Based Metadata**: On-chain logic that updates each token’s displayed name or artwork as it meets certain price or market thresholds (e.g., \"level up\" events).  \n- **Big Holder (Conviction) NFTs**: Reward addresses holding above a certain fraction of the total supply whenever a threshold crossing occurs.  \n- **Fee Splits**: Systemically distribute token-based fees to the **creator** side while directing the SOL-based fees to the **protocol** side.  \n- **Optional Single-Sided Liquidity**: Provide a fair launch experience by enabling tokens to deposit only their side of the liquidity pool, letting the market supply the counterpart asset (usually SOL).\n\nThis TDD aims to detail every relevant piece of the on-chain architecture, highlighting the data structures, instructions, security checks, and potential future expansions.\n\n---\n\n2. High-Level Goals\n\n1. **Usable Memecoin Framework**: Allow new projects to spin up “fun, hype-based” tokens with reliable **trust-minimized** code on Solana.  \n2. **No Additional Minting**: Once the total supply is minted, the mint authority is burned, ensuring no unexpected inflation.  \n3. **Evolving Token Identity**: Each token can embed comedic or brand-centric evolution triggers, changing its name or URIs as the price or volume crosses new thresholds.  \n4. **Conviction-Based Rewards**: Large stakeholders (≥ a threshold % of supply) can claim or automatically receive special NFTs signifying their “conviction” or loyalty.  \n5. **Secure Fee Infrastructure**: Protocol-based instructions seamlessly route fees to PDAs, with minimal risk of misappropriation.  \n6. **Flexible Deployment**: The program can be configured to remain upgradable under a multisig or locked permanently for immutability.  \n\n---\n\n3. Core Accounts & PDAs\n\nSolana programs rely on **accounts** and **Program Derived Addresses (PDAs)** for state management. Below are the **key** PDAs that unify the platform logic.\n\n3.1. `MemeTokenState`\n\n**Purpose**: Track essential data for each launched memecoin.\n\n\n\n**Likely Seeds**: `[b\"meme_token_state\", creator_pubkey, mint_pubkey]`.\n\n- **creator**: The wallet or entity that initiated token creation.  \n- **mint**: The SPL token mint that now has a locked supply.  \n- **name/symbol**: Display references for quick on-chain checks (though the actual displayed name may be updated via Metaplex).  \n- **evolutions_pda**: A pointer to the `EvolutionData` account.  \n- **registry_pda**: A pointer to the `ConvictionRegistry`.  \n- **fee_vault_pda**: References the `FeeVault` for collecting fees.\n\n---\n\n3.2. `EvolutionData`\n\n**Stores** threshold-based instructions for how the token’s name/URI changes when crossing certain triggers (price, volume, etc.).\n\n\n\n**Likely Seeds**: `[b\"evolution_data\", mint_pubkey]`.\n\n- This account can hold **5**, **10**, or **unlimited** evolution steps, depending on space allocated.  \n- The `owner` is typically the **MemeTokenState** or the same as `creator`, ensuring only authorized calls can mutate these records.\n\n---\n\n3.3. `ConvictionRegistry`\n\n**Purpose**: A ledger of addresses that have “registered” themselves as big holders (≥ some fraction like 0.42069% of total supply).\n\n\n\n**Likely Seeds**: `[b\"conviction_registry\", mint_pubkey]`.\n\n- Each user calls `register_holder` upon crossing the threshold.  \n- The protocol references this account whenever a threshold-based “evolution” occurs to distribute “Conviction NFTs.”\n\n---\n\n3.4. `FeeVault`\n\n**Purpose**: Store references to **where** fees go—namely, the PDAs or token accounts that hold them.\n\n\n\n**Likely Seeds**: `[b\"fee_vault\", mint_pubkey]`.\n\n- **protocol_sol_vault**: A system account (or associated token account for wSOL) that accumulates the SOL side of fees.  \n- **creator_token_vault**: An SPL token account that receives the token side of fees.  \n- **lp_token_vault**: If the protocol invests fees into an AMM and gets LP tokens back, store them here.  \n- **protocol_pubkey** / **creator_pubkey**: Distinct addresses that can call withdrawal instructions. Typically the protocol side is a global treasury, and the creator side is the memecoin project’s address.\n\n---\n\n4. Instruction-Level Workflows\n\n4.1. `create_meme_token`\n\n**Core**: Sets up a new memecoin, including mint creation, locking supply, setting up PDAs.\n\n1. **Args**:  \n   - `(name, symbol, supply, decimals, distribution_list, etc.)`  \n   - Possibly a bool for “pre_mint” logic if you want to distribute some tokens upfront.  \n\n2. **Flow**:  \n   1. Create and initialize the SPL **mint**.  \n   2. Mint up to the full supply to designated addresses.  \n   3. Set mint authority to `None`, **locking** the total supply.  \n   4. Create the **MemeTokenState** with references to newly initialized PDAs (`EvolutionData`, `ConvictionRegistry`, `FeeVault`).  \n   5. Possibly store initial config in `FeeVault` (like fee rates, distribution addresses).\n\n3. **Validation**:  \n   - The signer must be the “creator,” ensuring random users can’t create a MemeTokenState claiming the same seeds.  \n   - If a “pre_mint” is used, ensure it doesn’t exceed the supply.\n\n---\n\n4.2. `set_evolutions`\n\n**Purpose**: Populate or update the array of `(price_threshold, new_name, new_uri)` in `EvolutionData`.\n\n- **Args**: `Vec<EvolutionItem>`, each item specifying a threshold and new metadata.  \n- **Flow**:  \n  1. Check that the caller is the `owner` of `EvolutionData`.  \n  2. Replace or append items in `evolutions`.  \n  3. Possibly reorder them by ascending threshold for simpler lookups later.\n\n**Corner Cases**: If new evolutions are introduced after some have already triggered, the program can skip them if the price is already beyond that threshold.\n\n---\n\n4.3. `register_holder`\n\n**Adds** a user to the `ConvictionRegistry` if they hold ≥ X% (like 0.42069%).\n\n1. **Args**: Potentially just `( )`, since the user’s identity and token account can be derived from context.  \n2. **Flow**:  \n   1. The user passes in their token account.  \n   2. Program checks `token_account.amount >= threshold_amt`.  \n   3. If valid, add user’s `Pubkey` to the `holders` vector in `ConvictionRegistry`.  \n3. **Validation**:  \n   - Must confirm the user’s token account is indeed owned by them.  \n   - If user is already in the list, do nothing (or increment a “registration version” if needed).\n\n**Performance**: Storing an unbounded number of holders can be challenging; typically, you limit the maximum or store them in multiple pages. But if you expect ~200 or fewer big holders, it’s manageable in a single vector.\n\n---\n\n4.4. `distribute_conviction_nfts`\n\n**Rewards** big holders with an NFT each time the token crosses from level `k` to `k+1`.\n\n1. **Trigger**: Called after an evolution threshold is crossed, or after a “metadata update” event.  \n2. **Flow**:  \n   1. Load `ConvictionRegistry`.  \n   2. For each holder in `holders`, confirm they still hold ≥ X%.  \n   3. If yes, **mint** them an NFT referencing “the old level.” If no, remove them from the registry.  \n   4. Possibly do this in batches if you expect more than can fit in a single transaction.  \n\n3. **NFT Minting**:  \n   - Typically uses a CPI call to **Metaplex** `create_metadata_accounts_v3` or a minimal “NFT standard” instruction.  \n   - The minted NFT might store fields like “Conviction NFT – Level 3,” or embed a dynamic SVG referencing the date/time.\n\n---\n\n4.5. `update_metadata`\n\n**Updates** the displayed name and/or URI using Metaplex instructions.\n\n1. **Args**: Possibly `(current_price: u64)`, or the program obtains this from an aggregator.  \n2. **Flow**:  \n   1. Compare `current_price` with the items in `EvolutionData`.  \n   2. Determine if a threshold is newly surpassed.  \n   3. Construct a Metaplex `update_metadata_accounts_v2` instruction with the new name/URI.  \n   4. Optionally call `distribute_conviction_nfts` if a level changed.  \n3. **Validation**:  \n   - The Metaplex “update authority” must be the **Platform** program’s PDA or a known address.  \n\n---\n\n4.6. `trade_via_ammpool`\n\n**Allows** a user to swap tokens (SOL ↔ MemeToken) while letting the Platform auto-collect fees:\n\n1. **Args**: `(amount_in, min_out, user_in_token_acct, user_out_token_acct, etc.)`.  \n2. **Flow**:  \n   1. **Calculate** a fee portion (e.g., 1% of `amount_in`).  \n   2. If `user_in_token == SOL`, deposit that fee portion into `protocol_sol_vault`.  \n   3. If `user_in_token == MemeToken`, deposit that fee portion into `creator_token_vault`.  \n   4. **CPI** into Orca’s `swap` for `(amount_in - fee)`.  \n   5. Check if new price crosses an evolution threshold; if so, call `update_metadata`.\n\n**Complexities**:  \n- The program must handle “wrapped SOL” if user_in_token is SOL.  \n- If the user is swapping MemeToken → Another SPL token, some logic might direct a portion of that other SPL token as protocol fees; adjustments are possible but typically you focus on the MemeToken & SOL case.\n\n---\n\n4.7. `withdraw_protocol_sol` & `withdraw_creator_tokens`\n\n**Purpose**: Let each side retrieve the fees.  \n- **`withdraw_protocol_sol`** checks that the caller matches `FeeVault.protocol_pubkey`, then transfers lamports from `protocol_sol_vault` to the requested account.  \n- **`withdraw_creator_tokens`** checks if the caller is `FeeVault.creator_pubkey`, then uses an SPL `transfer` from `creator_token_vault` to their personal token account.\n\nBoth instructions can impose optional additional checks, like time-locked withdrawals or vesting constraints if desired.\n\n---\n\n5. Fee Collection & Distribution\n\n5.1. Default Scenarios\n\n1. **Buying MemeToken with SOL**:  \n   - 1% of `SOL` side → protocol.  \n   - The user receives `(amount_in - fee)` worth of tokens from Orca.  \n2. **Selling MemeToken for SOL**:  \n   - 1% of `MemeToken` side → creator.  \n   - The user receives `(amount_in - fee)` worth of SOL from Orca.\n\n5.2. Configurable Rates\n\n- The platform can store `fee_rate_bps` (e.g., `100` = 1%) inside `FeeVault`.  \n- Sub-splits can be introduced: e.g., half burned, half to the creator, or some portion to an on-chain treasury.  \n- If upgradability is retained, these rates can be changed over time by the protocol/creator via a governance or multisig approach.\n\n5.3. Storing & Withdrawing Fees\n\nAll fees land in:\n\n- **`protocol_sol_vault`** for SOL.  \n- **`creator_token_vault`** for MemeToken.  \n\nAt any point, the respective authority can call a “withdraw” instruction to claim them. This ensures a **clean separation** of roles:\n\n- The **creator** never touches the SOL side.  \n- The **protocol** never touches the token side.\n\n---\n\n6. Metadata Evolutions & NFT Rewards\n\n6.1. Evolving Metadata\n\n**Key**: The on-chain name/symbol embedded in the SPL mint are typically static, so the platform relies on the **Metaplex** program for dynamic display updates. Once a threshold is hit:\n\n1. The program sets the **Metaplex “update authority”** to itself or a delegated address at creation time.  \n2. `update_metadata` modifies the `name` or `uri` in the Metaplex `MetadataAccount`.  \n3. Wallets or explorers referencing the token’s Metaplex metadata see the new name/URI.\n\n6.2. Conviction NFTs\n\n6.2.1. Threshold Setup\n\n- Typically a fraction like 0.42069% for comedic effect or 0.1% for simpler logic.  \n- The actual raw integer is `(threshold_percent * total_supply)`, factoring in decimals.\n\n6.2.2. Registry & Distribution Flow\n\n1. A user calls `register_holder` if they surpass the threshold.  \n2. On a new evolution level crossing, `distribute_conviction_nfts` loops over `holders`.  \n3. It prunes those that no longer meet the threshold.  \n4. Mints an NFT to each valid address.  \n\n6.2.3. NFT Mint Details\n\n- Each NFT is typically a standard Metaplex token with `1` supply, referencing an artwork or quick SVG.  \n- The program can embed comedic text referencing the old name or threshold.  \n- Recipients can hold or trade these NFTs on standard marketplaces.\n\n---\n\n7. Single-Sided Liquidity & AMM Integration\n\n7.1. Why Single-Sided?\n\nMany projects prefer a “fair” approach where the project team only deposits their token. The broader market or community will deposit the counterpart (SOL), setting a fair market price.\n\n7.2. Orca Pool Creation\n\n**Instruction**: `create_pool_with_single_side` (optional, but typical for a “fair launch”).\n1. The memecoin deposits X tokens into Orca’s liquidity pool.  \n2. The protocol or user might receive some **LP tokens** in `lp_token_vault`.  \n\nBelow is the **continuation and conclusion** of the **Memecoin Launchpad & Evolutionary Token Platform – Technical Design (Extended Version)** document, picking up from **Section 7.3** onward. \n\n---\n\n7.3. Ongoing Liquidity Management\n\n1. **Add Liquidity**:  \n   - If the memecoin’s creator or the protocol wishes to deepen liquidity, they can deposit additional tokens (and possibly SOL) into the same Orca pool.  \n   - In return, they receive more LP tokens, which are held in the `lp_token_vault` or distributed as they see fit.\n\n2. **Remove Liquidity**:  \n   - Burn LP tokens from the `lp_token_vault` to reclaim the underlying token and SOL.  \n   - This process can be used to redistribute partial liquidity or execute buybacks.\n\n3. **Fee Integration**:  \n   - A portion of the fees collected (in either SOL or tokens) can be automatically reinvested into the liquidity pool.  \n   - This advanced strategy helps maintain a more stable price floor, though it increases the complexity of fee logic.\n\nBy allowing the protocol or creator to manage these LP positions, the Platform supports a variety of liquidity provisioning strategies, from purely “fair launch” to actively managed pools.\n\n---\n\n8. Security Considerations\n\n8.1. Program Upgrade Authority\n\n- **Multisig** (e.g., Squads): The recommended approach is to place the upgrade authority under a 2-of-3 or 3-of-5 multisig, allowing safe upgrades if bugs or improvements are needed.  \n- **Immutable**: If the community demands maximum trustlessness, the upgrade authority can be set to `None`, making the code unchangeable.\n\n8.2. Permissioned Calls & PDA Ownership\n\n- **create_meme_token**: Only the designated “creator” can call this to avoid collisions or unauthorized token creation under the same seeds.  \n- **FeeVault**: Withdraw instructions check if the caller matches the relevant pubkey (creator vs. protocol).  \n- **EvolutionData**: Only the authorized owner (or the program’s PDA) can modify thresholds or name/URI mappings.  \n- **ConvictionRegistry**: `register_holder` ensures the user actually holds ≥ X%. The program verifies they own the relevant token account.  \n\n8.3. Data Validation & Overflow Handling\n\n- For each instruction, careful arithmetic checks prevent integer overflow (especially around 10^9 or 10^18 raw token amounts).  \n- The program ensures no negative outcomes (like underflow when subtracting fees).\n\n8.4. Metaplex Update Authority\n\n- The token’s Metaplex metadata must be set so that only the Platform’s **PDA** (or another controlled address) can call `update_metadata`. If set incorrectly, a malicious party could override name/URI.\n\n8.5. Registry Size Constraints\n\n- Storing large lists of big holders on-chain can be expensive. The protocol can impose a max registry size, or store multiple “pages” if more than N addresses sign up.  \n- If the threshold is high enough, the maximum number of potential holders remains small (~200 or fewer).\n\n8.6. Off-Chain Price Feeds\n\n- If the platform relies on an **oracle** (like Pyth) to get a price, verifying its authenticity is critical. Typically, you read from a Pyth account on-chain. If passing the price manually, the instruction must trust the signers or incorporate a known aggregator feed to mitigate manipulation.\n\n---\n\n9. Possible Extensions & Future Work\n\n1. **Tiered Conviction NFTs**  \n   - Instead of a single threshold, define multiple tiers (e.g., ≥0.1%, ≥0.42%, ≥1%), awarding different NFT “rarities” based on the user’s stake.\n\n2. **DAO Governance**  \n   - Integrate a governance token or use the memecoin itself as a voting mechanism. Allow changes to fee rates or thresholds via on-chain proposals.\n\n3. **Bridging & Cross-Chain**  \n   - Add instructions to lock tokens in a Wormhole (or similar) bridge contract, creating a cross-chain version of the memecoin on EVM or other L2 solutions.\n\n4. **Buyback & Burn**  \n   - The protocol or creator could define an automatic buyback mechanism when the price dips below certain thresholds, using fee or treasury funds.\n\n5. **Advanced Liquidity Farming**  \n   - The platform could stake its LP tokens in yield farms or aggregator vaults, distributing extra rewards back to the protocol or token holders.\n\n6. **Staking & Tiered Utility**  \n   - Offer direct staking instructions where holders can lock tokens on-chain to gain benefits (e.g., additional NFT tiers, reduced swap fees, etc.).\n\n7. **Multi-Sig to DAO Transition**  \n   - Over time, the multi-sig authority could be transferred to a decentralized DAO structure on Realms (SPL Governance).\n\n8. **Open IDLs for Aggregators**  \n   - Provide a standard interface for Jupiter or other aggregators to integrate “evolution triggers” or “conviction logic” even if users trade outside the official front end.\n\n---\n\n10. Conclusion\n\nThe **Memecoin Launchpad & Evolutionary Token Platform** detailed here brings together:\n\n- **Locked Supply** with a comedic or brand-centric approach.  \n- **Threshold-Based Metaplex Evolutions**, enabling dynamic name/URI changes as price or volume milestones are met.  \n- **Conviction NFTs**, rewarding large holders with unique collectibles each time a “level up” occurs.  \n- **Fee Splits** where the **protocol** receives SOL side fees and the **creator** receives token side fees, all tracked via on-chain PDAs.  \n- **Single-Sided Liquidity** for fair launch price discovery, plus optional advanced liquidity management.\n\nBy consolidating these features into a **single Anchor program** (or modular set of programs), the Platform offers **meme token creators** a powerful, extensible, and **secure** foundation. They can customize supply, thresholds, and fee configurations, while trusting established best practices for immutability (once audited and finalized) or progressive governance via multisig and potential DAO transitions.\n\nUltimately, the **Platform** unites fun meme dynamics with **serious, trust-minimized** tokenomics on Solana—empowering new communities to launch, evolve, and reward loyal holders in ways that are both **transparent** and **efficient**.\n\n\n---\n\nHigherrrrrrr Community Brief\n\nWelcome, deviants, to the **Higherrrrrrr** community tokenomics overview. This doc is your biblical resource for the **Higherrrrrrr** protocol token on Solana—how *Base V1 Supporters*\\* fit in, why we have “Conviction NFTs,” and how the “floor mechanism” works. We’ll mention the ticker **once**—*it’s called **CULT***—but after that, it’s just “the token.”\n\n---\n\nQuick Degen Analogy: “On-Chain Arcade Machine”\n\nImagine a giant arcade machine:\n\n- You toss in **tokens** when you want to play (trade).  \n- Half of your coin (0.5%) is **burned**—like the arcade ripping up your credits so no one else can use them.  \n- The other half (0.5%) in **SOL** is used to **refill the prize pool** (the liquidity floor), so there’s always more plushies in the claw machine if the market price dips.  \n\nOver time:\n\n1. **Token Supply** shrinks (from constant burns).  \n2. **Floor Liquidity** grows, so big dumps get absorbed.  \n\nThat’s how **Higherrrrrrr** keeps the game going for degens.\n\n---\n\n1. Summary (tl;dr)\n\n- **LP Fees:** 1% total fee on trades (via Orca/Jupiter).  \n  - **0.5%** of the **token side** is burned (removed from supply).  \n  - **0.5%** of the **SOL side** is added as single-sided liquidity to help stabilize the token price.  \n- **Conviction NFTs:** Holding **≥ 0.042069%** of the supply (420,690 tokens) grants you special NFTs (or “relics”) every time the token “evolves.”  \n- **Distribution & Allocations:**  \n  - **Team**: 15% total in a multisig (7.77% current team w/ vesting, 7.23% future expansions)  \n  - **Migration LP Support\\***: 5%  \n  - **Base V1 Supporters\\***: 15%  \n  - **Single-Sided Launch Pool**: 65%  \n- **Evolutionary Mechanics:** Certain market cap (or price) thresholds trigger on-chain relics and name/art updates.  \n- **New Creator Tokens:** For other tokens launched on Higherrrrrrr, the 0.5% SOL fee may be **split** (e.g., 0.25% to protocol revenue, 0.25% to that token’s floor).\n\n---\n\n2. What’s the Higherrrrrrr Cult About?\n\n**Higherrrrrrr** (with seven “r”s) is about being based while building an ever-evolving “cult coins.” Key bullet points:\n\n- **Total Supply**: 1,000,000,000 tokens, 9 decimals, no future minting (burn authority = gone).  \n- **Evolutions**: Token’s on-chain name/art changes at certain thresholds—think “ritualistic transformations” but purely for hype.  \n- **Conviction NFTs**: Holding at least **0.042069%** of the supply (420,690 tokens) grants special relic NFTs each time the token “levels up.”  \n\nWe aim to combine a dash of degenerate humor with robust on-chain engineering to keep the community engaged and entertained.\n\n---\n\n3. Distribution: Community Focus\n\n3.1 Team & Future Expansions (15%)\n\n- **Current Team (7.77%)**  \n  - 3.33% to Carl (the main dev), the remainder to other team/advisors, all under a **12-month linear vesting schedule**.  \n  - Held in a **Squads multisig**—no day-one dumps.  \n\n- **Future Reserve (7.23%)**  \n  - Marketing, strategic OTC sales, future contributors.  \n  - Also locked in the **Squads multisig**; requires team/community approval for usage.\n\n3.2 Migration LP Support\\* (5%)\n\n- Reserved for establishing and supporting a cross-token liquidity pool.  \n- See Appendix for details.\n\n3.3 Base V1 Supporters\\* (15%)\n\n- Reserved for those who supported Higherrrrrrr V1 on Base.  \n- See Appendix for details.\n\n3.4 Single-Sided Launch Pool (65%)\n\n- Placed on Orca as a single-sided liquidity deposit for open trading.  \n- Ensures broad distribution from day one, minimal slippage, and no insider advantage.\n\n---\n\n4. Evolution Mechanics\n\n4.1 On-Chain Price/Cap Triggers\n\nWhen the token crosses certain thresholds (price or market cap), we update the token’s metadata via **Metaplex**—shifting its name, art, or references. Think of it as “leveling up” each time the cult hits a new milestone.\n\n4.2 The `images/evolution.svg` File\n\nWe store a file named `images/evolution.svg` that morphs at each threshold—introducing new relics, colors, or inside jokes. It’s basically a “cult tapestry” that gets upgraded over time.\n\n4.3 Why Evolve?\n\n- **Keeps It Fun**: Each threshold crossing is a community event for new memes.  \n- **Real-Time Updates**: Token explorers and wallets that respect Metaplex metadata will show these changes.  \n\n---\n\n5. Conviction NFTs (≥ 0.042069%)\n\n5.1 The Zealot Threshold\n\nHold **0.042069%** of the supply (420,690 tokens) to become a “zealot.” This comedic figure ensures only big holders get the “cult relic” NFTs.\n\n5.2 Registry & Rewards\n\nAn on-chain registry tracks addresses above 420,690 tokens. Whenever the token “levels up”:\n\n- Everyone still on the registry can claim an NFT commemorating the “old level.”  \n- If you dip below the threshold, you’re pruned.\n\n---\n\n6. Fees & Burning Mechanic\n\n6.1 Trading Fees\n\nA **1%** fee applies to every swap. It’s split into:\n\n1. **Token Side (0.5%)**  \n   - Burned outright—supply deflates continuously.\n\n2. **SOL Side (0.5%)**  \n   - Re-added as single-sided liquidity at a lower price range, creating an ever-stronger floor.\n\n6.2 Pokémon Card Store Analogy\n\n- **Buy/Sell** Pokémon cards at a local store.  \n- The store **removes** some cards from circulation each time (burn).  \n- The store keeps a portion of the cash (SOL) and uses it to **buy** more cards if prices dip, stabilizing the market.  \n\n---\n\n7. Team Vesting & Security\n\n7.1 Team Reserves (15%)\n\n- **7.77%** for current team/advisors:  \n  - 12-month linear vesting schedule.  \n- **7.23%** for future expansions, marketing, or partnerships.\n\nAll team tokens live in a **Squads multisig**, ensuring no single actor can dump or misappropriate.\n\n7.2 Multi-Sig & Optional Immutability\n\nA multi-sig (e.g., Squads) controls upgrade authority. If the community prefers, we can burn that authority for full immutability—no more changes possible.\n\n---\n\n8. Base V1 Supporters\\* (15%)\n\nA total of **15%** is reserved for these loyal participants. We’ll provide instructions on airdrops or bridging soon. Keep an eye on socials for updates.\n\n---\n\n9. Launch Plan & Liquidity\n\n9.1 Single-Sided Liquidity\n\nWe deposit **65%** of the supply into Orca on day one as a single-sided token deposit. This ensures fair price discovery without big insider advantages.\n\n9.2 Migration LP Support\\* (5%)\n\nA separate **migration-focused** liquidity pool will be seeded with 5% of the supply. See Appendix for details.\n\n9.3 Future Adjustments for New Tokens\n\n- **For other tokens** launching under the Higherrrrrrr banner, the SOL side of fees (0.5%) can be **split** (e.g., 0.25% to protocol revenue, 0.25% to floor). The exact ratio is **globally adjustable** by the Higherrrrrrr team if needed.\n\n---\n\n10. Next Steps\n\n1. **Check the Liquidity**: Once launched, you can buy/sell on Orca or via Jupiter.  \n2. **Register if You’re a Zealot**: If you hit ≥ 420,690 tokens, call `register_holder`.  \n3. **Watch the Art**: Keep an eye out for **`evolution.svg`** updates whenever thresholds are hit.  \n4. **HODL or Trade**: Up to you—just remember, relic NFTs reward big holders.  \n5. **Provide Feedback**: Suggest new slogans, relic ideas, or comedic thresholds.\n\n---\n\n11. Recap (Tech Scope)\n\n- **Token Supply**: 1,000,000,000 total, no extra minting.  \n- **Distribution**:  \n  - 15% Team/Expansions (7.77% for current team w/ vesting, 7.23% for future uses)  \n  - 5% Migration LP Support\\*  \n  - 15% Base V1 Supporters\\*  \n  - 65% Single-Sided Launch  \n- **Evolutions**: On-chain comedic name changes, referencing `evolution.svg`.  \n- **Conviction NFTs**: Addresses ≥ 0.042069% (420,690 tokens) claim relics on each threshold.  \n- **Fees**:  \n  - 1% total (0.5% burn + 0.5% single-sided SOL to the floor).  \n  - **For new tokens**: 0.5% SOL is partially protocol revenue, partially floor liquidity (ratio adjustable).  \n- **Upgrade**: Multi-sig, can be burned for immutability.\n\nWe invite you to jump in and help push **Higherrrrrrr** to comedic extremes. Stay tuned on your favorite channels, and let’s see how far we can take this meme.\n\n---\n\n**—From the Higherrrrrrr Community**  \n*(Where cults meet on-chain engineering… all hail the meme!)*\n\n---\n\nAppendix\n\nBase V1 Supporters\\* (15%)\nThis allocation is reserved for the token communities that supported the original Higherrrrrrr V1 launch on Base. We’ll finalize the airdrop or bridging mechanism for these tokens soon.\n\nMigration LP Support\\* (5%)\nDesignated for the **Migrated Tokens/CULT** liquidity pools. The Migrated Tokens side is burned on each trade, while the CULT side directs 0.5% to the “floor” for price stability. This ensures robust cross-token liquidity pools for migrated tokens from Base.\n\n\n---\n\nHigherrrrrrrr (CULT) Protocol White Paper\n\n> **A Solana-Based Memecoin Launchpad and Evolutionary Token Framework**  \n> *Where threshold-based metadata, big-holder NFTs, deflationary principles, and innovative fee collection converge—with flexible fee splits and extensive configurability.*\n\nTable of Contents\n\n1. Introduction  \n2. Conceptual Vision  \n3. Protocol Architecture  \n4. Tokenomics & Supply Mechanics  \n5. Evolving Metadata & Threshold Triggers  \n6. Conviction NFTs for Large Holders  \n7. Trading Flows & Integration with Orca  \n8. Fee Collection & Liquidity Reinforcement  \n9. Governance & Security  \n10. Launchpad & Ecosystem Vision  \n11. Use Cases & Scenarios  \n12. Deployment & Adoption  \n13. Beyond the Current Scope  \n14. Conclusion  \n15. Appendix\n\n---\n\n1. Introduction\n\n**Higherrrrrrrr**—pronounced with **seven** trailing “r”s—represents a fusion of **memecoin culture** and **robust token engineering** on Solana. While it has an intentionally playful aesthetic, the protocol enforces a **serious, modular, and configurable** approach to on‑chain identity updates, holder engagement, fee management, and single‑sided liquidity provision. Here is a quick overview of its five key mechanics:\n\n- **Threshold-Based Evolving Metadata**: Token names and artwork can “level up” as certain price or market milestones are crossed.  \n- **Deflationary Design**: A portion of tokens are burned on every swap, ensuring a continuously decreasing supply.  \n- **Big-Holder “Conviction” NFTs**: Addresses holding at least 0.042069% of a token’s total supply automatically receive commemorative NFTs each time the token evolves.  \n- **Single-Sided Liquidity**: Projects can provide only their own tokens to a pool, letting the market bring in SOL, thus enabling fair price discovery.  \n- **Flexible Fee Splits & Innovative Fee Collection**: A default 1% swap fee is split between token burns and SOL‑based liquidity or revenue—but **all splits and destinations** (including protocol revenue vs. “floor” support) are fully configurable. Notably, fees are now collected directly from aggregated liquidity provider (LP) fees in our Orca pool deposit rather than solely via a pass‑through front‑end.\n\nBy aligning playful elements with cryptographic fundamentals—and keeping all parameters adjustable—**Higherrrrrrrr** aims to empower a new generation of meme tokens on Solana.\n\n---\n\n2. Conceptual Vision\n\n2.1. Memecoin Evolution as a Core Feature\n\n**Higherrrrrrrr** uses threshold‑based “evolutions” that change the on‑chain name or artwork of a token in response to market conditions. This concept parallels how internet memes gain additional references or inside jokes over time, but here it is **anchored** to trust‑minimized, on‑chain logic. Creators can define the thresholds that best fit their narrative—such as price marks, volume targets, or community events.\n\n2.2. Balancing Engagement and Transparency\n\nMany meme tokens rely on hype without transparency. **Higherrrrrrrr** proves that a lighthearted aesthetic can still be underpinned by sound tokenomics. The iconic threshold of **0.042069%** for big holders (420,690 tokens if the total supply is 1B) is playful while providing a clear on‑chain rule set that rewards real engagement. Meanwhile, all distribution, burning, and fee flows are logged on‑chain for transparent verification.\n\n2.3. Why Solana?\n\nThe Solana blockchain provides high throughput, low fees, and tooling like **Metaplex** for token/NFT metadata and **Orca** for efficient liquidity. This makes it easy to:\n\n- Update token names/art frequently without excessive gas costs.  \n- Execute trades rapidly.  \n- Mint and distribute NFTs (for big holders) with minimal overhead.\n\n---\n\n3. Protocol Architecture\n\n**Higherrrrrrrr** is designed as a **launchpad** and **framework** for a variety of meme‑inspired tokens. The flagship **CULT** token demonstrates how each module functions, but the same approach can be applied to any token that wishes to:\n\n- Fix its total supply (commonly 1B tokens, 9 decimals) and lock the mint authority to ensure immutability.\n- Implement threshold‑based metadata evolutions (price or other metrics).\n- Award NFTs to large holders through an on‑chain registry.\n- Enforce fees through innovative LP fee collection mechanisms and customized fee splits.\n\nKey Pillars\n\n1. **Token Creation & Supply Lock**  \n   - Mint a predetermined supply (often 1B with 9 decimals), then lock (burn) the mint authority to guarantee no further minting.\n\n2. **Metadata Evolutions**  \n   - On‑chain name/URI updates are triggered when predefined thresholds are crossed, reflecting the token’s evolving narrative.\n\n3. **Conviction NFTs**  \n   - Addresses holding ≥ 0.042069% of the total supply receive a commemorative NFT upon each evolution, rewarding long‑term commitment.\n\n4. **Fee & Liquidity Mechanics with LP Fee Collection**  \n   - Instead of relying solely on a pass‑through fee mechanism, the protocol now collects aggregated fees directly from our Orca LP deposit. These LP fees are then split evenly between protocol revenue and creator support, with a default 1% fee structure.\n   - The fee distribution is fully configurable to adapt to various market conditions and project needs.\n\n5. **Pre‑Mine & Pool Distribution Lock‑In**  \n   - The token distribution is strictly partitioned: a fixed **35%** is allocated for pre‑mine distributions to early participants, while the remaining **65%** is allocated for pool deposits. This ensures a balanced and secure initial allocation.\n\n---\n\n4. Tokenomics & Supply Mechanics\n\n4.1. The 1B Supply with 9 Decimals\n\nEach **Higherrrrrrrr** token (e.g., CULT) typically has a supply of 1B tokens with 9 decimals, ensuring granular control over token economics. This fixed supply model is critical for maintaining deflationary pressure as tokens are burned on each swap.\n\n4.2. Locking the Mint Authority\n\nAfter initial allocations (team, community, liquidity pool, etc.), the mint authority is set to `None`. This action prevents any further token minting, guaranteeing the scarcity and integrity of the token supply.\n\n4.3. Pre‑Mine & Pool Distribution\n\nIn alignment with our innovative approach, the protocol enforces a strict distribution split:\n- **35% for Pre‑Mine**: Reserved for early participants and foundational community members.\n- **65% for Pool Distribution**: Allocated for the liquidity pool deposit to ensure robust market liquidity and fair price discovery.\n\nThis lock‑in mechanism ensures that early participants cannot pre‑mine the entire token supply and benefit from evolutionary updates without contributing to liquidity.\n\n---\n\n5. Evolving Metadata & Threshold Triggers\n\n5.1. Price‑Based Name or Artwork Updates\n\nTokens under **Higherrrrrrrr** define custom evolution thresholds that trigger changes in the token’s on‑chain metadata—such as name or artwork—once specific market milestones are achieved. For CULT, surpassing a price or market cap milestone initiates a metadata update, signifying a new “level” in the token’s lifecycle.\n\n5.2. Metaplex On‑Chain Updates\n\nUsing **mpl-token-metadata**, the designated update authority can seamlessly update the token’s metadata (e.g., name, symbol, URI) on‑chain when a threshold is exceeded. This ensures that the token’s evolving identity is accurately reflected in wallets and explorers.\n\n5.3. On‑Chain vs. Off‑Chain Storage\n\nWhile token metadata is updated on‑chain, associated assets (such as artwork) may reside on decentralized storage platforms like IPFS or Arweave. The on‑chain URI is updated to point to the new asset location, ensuring consistency and transparency.\n\n---\n\n6. Conviction NFTs for Large Holders\n\n6.1. The 0.042069% Threshold (420,690 Tokens)\n\nHolders maintaining at least **0.042069%** of the total supply (420,690 tokens for a 1B supply) qualify as “Conviction” holders. This threshold is both a playful and meaningful metric that ensures only committed participants receive rewards.\n\n6.2. On‑Chain Registry\n\nA dedicated on‑chain registry tracks addresses that meet or exceed the conviction threshold. Each time the token evolves, qualified addresses receive a unique, commemorative NFT that signifies their ongoing commitment.\n\n6.3. Implementation Details\n\n- **Registration**: Holders call the `register_holder` instruction when their balance exceeds the threshold.\n- **NFT Distribution**: Upon token evolution, the protocol mints a new NFT for each registered holder, reinforcing long‑term participation.\n\n---\n\n7. Trading Flows & Integration with Orca\n\n7.1. Orca as the Chosen AMM\n\n**Orca** is leveraged for its efficient, user‑friendly concentrated liquidity (CL) model on Solana. Through Orca, token‑to‑SOL swaps are executed rapidly, with built‑in mechanisms for fee collection and liquidity management.\n\n7.2. Single‑Sided Liquidity Provision\n\nProjects deploy only their own tokens into a liquidity pool, allowing the market to contribute SOL. This mechanism promotes fair price discovery by ensuring that liquidity is provided in a balanced manner.\n\n7.3. Fee Collection from LP Pools\n\nDistinct from traditional pass‑through fee collection, our protocol now aggregates fees directly from the Orca LP fee account. During each swap:\n- **Token fees** are taken from the swapped amount, with a portion allocated to token burns.\n- **SOL fees** are accumulated in the Orca LP fee account and later distributed evenly between protocol and creator via a dedicated fee distribution instruction.\nThis ensures that fee collection is both transparent and integrated into the liquidity dynamics.\n\n7.4. Automated Threshold Checks\n\nFollowing each swap, the protocol decodes the current price from the Whirlpool state, checking against predefined evolution thresholds. If a threshold is crossed, the token’s metadata is updated accordingly via a Metaplex CPI call.\n\n---\n\n8. Fee Collection & Liquidity Reinforcement\n\n8.1. 1% Fee Mechanism (Configurable)\n\nA default fee of **1%** is applied to swaps, split as follows:\n- **Token Side**: Approximately 0.5% of the swapped tokens are burned, reducing the overall supply.\n- **SOL Side**: Aggregated SOL fees are collected in the Orca LP fee account.\n\n8.2. Aggregated LP Fee Distribution\n\nFees accumulated in the Orca LP fee account are distributed evenly between the protocol and the creator:\n- A dedicated fee distribution instruction retrieves the total fees from the LP fee account.\n- The fees are split equally, with any remainder allocated to the protocol.\nThis mechanism ensures that both the protocol and the creator benefit directly from liquidity provision and swap activity.\n\n8.3. Dynamic Fee Allocation\n\nThe fee split is configurable to allow adjustments based on community input and market conditions:\n- **Increased Floor Support**: Adjust the split to bolster liquidity support.\n- **Protocol Revenue**: Reallocate a higher share to the protocol for operational funding.\n- **Community Treasury**: Optionally, a portion of fees can be diverted to a treasury for further ecosystem development.\n\n---\n\n9. Governance & Security\n\n9.1. Multi‑Sig Upgrade Authority\n\nInitially, a multi‑sig (e.g., **Squads**) manages the primary program, allowing rapid updates and parameter adjustments while minimizing centralization risks.\n\n9.2. Transition to Full Immutability\n\nOnce community confidence is established, the upgrade authority can be set to `None`, rendering the program immutable. Similarly, the Metaplex metadata update authority can be relinquished to permanently fix the token’s final evolution state.\n\n---\n\n10. Launchpad & Ecosystem Vision\n\n**Higherrrrrrrr** is more than a single token—it is a framework for launching an ecosystem of evolutionary, community‑driven tokens. Key objectives include:\n\n1. **Multiple Token Deployments**: Each token adheres to a fixed supply model (e.g., 1B tokens with 9 decimals) and evolves through predefined thresholds.\n2. **Configurable Parameters**: Projects can set unique evolution thresholds, fee splits, and distribution mechanisms to tailor the token’s behavior.\n3. **Financial Flexibility**: Creators have the ability to dynamically adjust fee allocations, ensuring sustainability and growth.\n4. **Cross‑Promotion and Synergy**: Tokens deployed via **Higherrrrrrrr** benefit from a shared framework that emphasizes transparency, innovation, and community engagement.\n\n---\n\n11. Use Cases & Scenarios\n\n1. **Playful, Thematic Tokens**  \n   - For example, a token named “FrogLeaps” may evolve at milestones like \\$0.001, \\$0.01, and \\$0.069, with large holders receiving “Frog Royalty” NFTs and fees supporting amphibian conservation initiatives.\n   \n2. **Brand and Marketing Experiments**  \n   - Brands can align token evolutions with marketing campaigns, awarding loyalty NFTs and adjusting fee splits to support brand events or charitable causes.\n\n3. **DAO and Governance Initiatives**  \n   - DAOs can use evolutionary tokens to gamify treasury growth, distributing “era NFTs” when certain thresholds are met and dynamically allocating fees to support the governance structure.\n\n---\n\n12. Deployment & Adoption\n\n12.1. Typical Deployment Flow\n\n1. **Token Creation**: Deploy the token with a fixed supply (e.g., 1B tokens with 9 decimals).\n2. **Allocation Setup**: Implement the strict distribution split—**35% for pre‑mine** and **65% for pool deposits**.\n3. **Mint Authority Lock**: Revoke mint authority to guarantee a fixed supply.\n4. **Define Evolution Thresholds**: Set milestones for metadata updates based on price or market metrics.\n5. **Register Large Holders**: Enable holders to register for Conviction NFTs by meeting the threshold.\n6. **Fee Structure Implementation**: Integrate the LP fee collection mechanism and configure the fee split.\n7. **Liquidity Provision**: Deposit tokens into a single‑sided liquidity pool on Orca, facilitating fair price discovery.\n8. **Front‑End Integration**: Provide interfaces for monitoring evolutions, NFT distributions, and fee collection.\n\n12.2. Team Vesting & Multi‑Sig Control\n\n- **Team Allocations**: For CULT, 15% of tokens are allocated to the team and reserved for future ecosystem initiatives.  \n- **Vesting Schedule**: Allocations for the current team vest over 12 months, ensuring long‑term commitment.  \n- **Multi‑Sig Governance**: Key operations are managed by a multi‑sig to mitigate the risk of unilateral decisions.\n\n12.3. Community and Developer Engagement\n\n- **Transparency**: All on‑chain actions, including fee collections and NFT distributions, are publicly verifiable.\n- **IDL and Documentation**: Comprehensive documentation and an IDL are provided for developers to integrate with the protocol seamlessly.\n- **Ecosystem Support**: Initiatives to support community‑driven projects and decentralized applications built on the protocol.\n\n---\n\n13. Beyond the Current Scope\n\nFuture expansions include:\n\n- **Cross‑Chain Integrations**: Bridging tokens to other blockchains or Layer 2 solutions.\n- **Additional NFT Tiers**: Creating multi‑tier NFT rewards for varying levels of token holding.\n- **Dynamic Liquidity Strategies**: Adapting liquidity positions in real time based on market conditions.\n- **Composable Fee Logic**: Integrating fee logic with yield farming, staking, or other decentralized finance (DeFi) applications.\n- **Enhanced Governance Models**: Further decentralizing control and decision‑making through DAO frameworks.\n\n---\n\n14. Conclusion\n\n**Higherrrrrrrr (CULT)** merges threshold‑based meme dynamics with a robust, deflationary architecture on Solana, emphasizing configurability at every turn. Its core innovations include:\n\n1. **Fixed Supply with Mint Authority Lock**: Ensuring no inflation post‑deployment.\n2. **Threshold‑Based Evolution**: Dynamic updates to on‑chain metadata that reflect market milestones.\n3. **Conviction NFTs**: Rewarding committed large holders with unique, evolution‑linked NFTs.\n4. **Innovative Fee Collection**: Aggregating fees directly from Orca LP pools and splitting them evenly between protocol and creator.\n5. **Strict Distribution Splits**: Locking pre‑mine distributions at **35%** and liquidity pool deposits at **65%** to ensure fair and balanced initial allocation.\n6. **Flexible and Transparent Governance**: Using multi‑sig and community‑driven models to manage protocol parameters securely.\n\nBy blending playful aesthetics with rigorous tokenomics, **Higherrrrrrrr** sets a new standard for evolutionary tokens on Solana.\n\n---\n\n15. Appendix\n\n15.1. Base V1 Supporters (15%)\n\nAllocations designated for early adopters and loyal community members, distributed via airdrops or bridging claims to reward initial supporters.\n\n15.2. Migration LP Support (5%)\n\nSpecifically designates supply for the **Migrated Tokens/CULT** liquidity pools. The Migrated Tokens side is burned on each trade, while the CULT side directs 0.5% to the “floor” for price stability. This ensures robust cross-token liquidity pools for migrated tokens from Base.\n\n\n\n---\n\nHigherrrrrrr Protocol\n\n> **Higherrrrrrr** – Where cults meet on-chain engineering!\n\nThis project is a Solana program built with Anchor. It implements a meme token with evolving metadata, conviction NFT rewards, unique fee mechanics, and more. Follow these instructions to reset your environment, install all prerequisites, and get started with development.\n\n---\n\nTable of Contents\n\n- Prerequisites\n- Resetting Your Environment\n  - Resetting Rust\n  - Clearing Node Modules\n- Installation\n  - Install Rust\n  - Install the Solana CLI\n  - Install Anchor CLI Using AVM\n- Building the Project\n- Running Tests\n- Project Structure\n- Additional Information\n\n---\n\nPrerequisites\n\n- **macOS** or **Linux/WSL**  \n- **Git**  \n- **Node.js** (v14 or later) and **npm**  \n- Internet connection\n\n---\n\nResetting Your Environment\n\nResetting Rust\n\nIf you want to completely reset your Rust installation (for a clean start):\n\n1. **Uninstall rustup (and Rust toolchains):**\n\n   \n\n2. **Remove residual directories:**\n\n   \n\n*Note: This will remove all globally installed Cargo binaries and toolchain data.*\n\nClearing Node Modules\n\nTo remove all Node.js dependencies and start fresh:\n\n\n\n---\n\nInstallation\n\nInstall Rust\n\nRust is required for writing Solana programs. The recommended installation method is via rustup.\n\n1. Install Rust with:\n\n   \n\n2. Reload your shell’s environment:\n\n   \n\n3. Verify the installation:\n\n   \n\n   You should see output similar to:\n\n   \n\nInstall the Solana CLI\n\nThe Solana CLI provides tools to build and deploy Solana programs.\n\n1. Install the Solana CLI by running:\n\n   \n\n2. If prompted, update your PATH. For example, add the following line to your shell profile (e.g., `~/.bashrc` or `~/.zshrc`):\n\n   \n\n3. Verify the installation:\n\n   \n\n   Expected output (version numbers may vary):\n\n   \n\nInstall Anchor CLI Using AVM\n\nThe Anchor Version Manager (AVM) lets you manage multiple Anchor versions easily.\n\n1. **Install AVM:**\n\n   \n\n2. **Verify AVM is installed:**\n\n   \n\n3. **Install the desired Anchor CLI version (e.g., v0.30.1):**\n\n   \n\n4. **Verify Anchor CLI:**\n\n   \n\n   You should see:\n\n   \n\n*If you encounter errors regarding dependency versions (e.g. with the `time` crate), see the troubleshooting section below.*\n\n---\n\nBuilding the Project\n\nIn the project root (where `Anchor.toml` and `Cargo.toml` reside), run:\n\n\n\nThis compiles the Solana program in `programs/protocol` and produces deployable artifacts.\n\n---\n\nRunning Tests\n\nThe project includes integration tests written in TypeScript.\n\n1. Ensure Node.js dependencies are installed:\n\n   \n\n2. Run tests via Anchor:\n\n   \n\n   Alternatively, if your `package.json` includes a test script, run:\n\n   \n\n---\n\nProject Structure\n\n- **Anchor.toml** – Main configuration for the Anchor project.\n- **Cargo.toml** – Workspace configuration that includes the Solana program.\n- **docs/TOKENOMICS.md** – Detailed tokenomics and design overview.\n- **programs/protocol/** – The Rust program implementing the protocol.\n- **tests/** – Integration tests in TypeScript.\n- **migrations/** – (Optional) Deployment migration scripts.\n\n---\n\nAdditional Information\n\n- **Local Cluster:** The project is configured to use a local Solana network (`localnet`). To run a local validator, use:\n  \n  \n\n- **Wallet:** Your provider wallet is defined in `Anchor.toml` (default: `~/.config/solana/id.json`). If you need a new wallet, run:\n\n  \n\n- **Deploying the Program:** When you’re ready to deploy to your local cluster, run:\n\n  \n\n- **Troubleshooting Dependency Issues:**  \n  If you encounter errors such as:\n\n  ```\n  error[E0282]: type annotations needed for `Box<_>`\n  ```\n  \n  This is due to an outdated dependency version (e.g. the `time` crate). To fix this when installing via AVM, you may need to:\n  \n  1. Clone the Anchor repo locally,\n  2. Update the dependency (e.g., force `time` to version `>=0.3.35` using a patch override in `Cargo.toml`), and then\n  3. Install Anchor CLI from your local copy:\n     \n     \n     \n  However, using AVM should typically handle version management for you.\n\n---\n\nHappy hacking with the Higherrrrrrr Protocol!\n```\n\n---\n\nHow to Use This README\n\n1. **Replace your current `README.md`** with the content above.\n2. **Adjust any sections as needed** (for example, tool versions or environment-specific instructions).\n3. **Follow the step‑by‑step instructions** to reset your environment and install all dependencies.\n\nThis README provides a comprehensive guide modeled on the official Anchor documentation and covers everything from resetting your environment to building and testing the project. If you need further customization or run into issues, feel free to ask!","buildTime":"2025-02-08T00:54:44.657Z"}